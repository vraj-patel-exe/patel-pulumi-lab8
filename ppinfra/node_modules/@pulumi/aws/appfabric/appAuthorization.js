"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppAuthorization = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS AppFabric App Authorization.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appfabric.AppAuthorization("example", {
 *     app: "TERRAFORMCLOUD",
 *     appBundleArn: arn,
 *     authType: "apiKey",
 *     credential: {
 *         apiKeyCredentials: [{
 *             apiKey: "exampleapikeytoken",
 *         }],
 *     },
 *     tenants: [{
 *         tenantDisplayName: "example",
 *         tenantIdentifier: "example",
 *     }],
 * });
 * ```
 */
class AppAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing AppAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AppAuthorization(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AppAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppAuthorization.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["app"] = state ? state.app : undefined;
            resourceInputs["appBundleArn"] = state ? state.appBundleArn : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["authUrl"] = state ? state.authUrl : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["credential"] = state ? state.credential : undefined;
            resourceInputs["persona"] = state ? state.persona : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["tenants"] = state ? state.tenants : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.app === undefined) && !opts.urn) {
                throw new Error("Missing required property 'app'");
            }
            if ((!args || args.appBundleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appBundleArn'");
            }
            if ((!args || args.authType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authType'");
            }
            resourceInputs["app"] = args ? args.app : undefined;
            resourceInputs["appBundleArn"] = args ? args.appBundleArn : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["credential"] = args ? args.credential : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenants"] = args ? args.tenants : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["authUrl"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["persona"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppAuthorization.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AppAuthorization = AppAuthorization;
/** @internal */
AppAuthorization.__pulumiType = 'aws:appfabric/appAuthorization:AppAuthorization';
//# sourceMappingURL=appAuthorization.js.map