"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphQLApi = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
class GraphQLApi extends pulumi.CustomResource {
    /**
     * Get an existing GraphQLApi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GraphQLApi(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GraphQLApi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GraphQLApi.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["additionalAuthenticationProviders"] = state ? state.additionalAuthenticationProviders : undefined;
            resourceInputs["apiType"] = state ? state.apiType : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authenticationType"] = state ? state.authenticationType : undefined;
            resourceInputs["enhancedMetricsConfig"] = state ? state.enhancedMetricsConfig : undefined;
            resourceInputs["introspectionConfig"] = state ? state.introspectionConfig : undefined;
            resourceInputs["lambdaAuthorizerConfig"] = state ? state.lambdaAuthorizerConfig : undefined;
            resourceInputs["logConfig"] = state ? state.logConfig : undefined;
            resourceInputs["mergedApiExecutionRoleArn"] = state ? state.mergedApiExecutionRoleArn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openidConnectConfig"] = state ? state.openidConnectConfig : undefined;
            resourceInputs["queryDepthLimit"] = state ? state.queryDepthLimit : undefined;
            resourceInputs["resolverCountLimit"] = state ? state.resolverCountLimit : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["uris"] = state ? state.uris : undefined;
            resourceInputs["userPoolConfig"] = state ? state.userPoolConfig : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
            resourceInputs["xrayEnabled"] = state ? state.xrayEnabled : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.authenticationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationType'");
            }
            resourceInputs["additionalAuthenticationProviders"] = args ? args.additionalAuthenticationProviders : undefined;
            resourceInputs["apiType"] = args ? args.apiType : undefined;
            resourceInputs["authenticationType"] = args ? args.authenticationType : undefined;
            resourceInputs["enhancedMetricsConfig"] = args ? args.enhancedMetricsConfig : undefined;
            resourceInputs["introspectionConfig"] = args ? args.introspectionConfig : undefined;
            resourceInputs["lambdaAuthorizerConfig"] = args ? args.lambdaAuthorizerConfig : undefined;
            resourceInputs["logConfig"] = args ? args.logConfig : undefined;
            resourceInputs["mergedApiExecutionRoleArn"] = args ? args.mergedApiExecutionRoleArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openidConnectConfig"] = args ? args.openidConnectConfig : undefined;
            resourceInputs["queryDepthLimit"] = args ? args.queryDepthLimit : undefined;
            resourceInputs["resolverCountLimit"] = args ? args.resolverCountLimit : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userPoolConfig"] = args ? args.userPoolConfig : undefined;
            resourceInputs["visibility"] = args ? args.visibility : undefined;
            resourceInputs["xrayEnabled"] = args ? args.xrayEnabled : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["uris"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GraphQLApi.__pulumiType, name, resourceInputs, opts);
    }
}
exports.GraphQLApi = GraphQLApi;
/** @internal */
GraphQLApi.__pulumiType = 'aws:appsync/graphQLApi:GraphQLApi';
//# sourceMappingURL=graphQLApi.js.map