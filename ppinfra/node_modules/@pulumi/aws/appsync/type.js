"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Type = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AppSync Type.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appsync.GraphQLApi("example", {
 *     authenticationType: "API_KEY",
 *     name: "example",
 * });
 * const exampleType = new aws.appsync.Type("example", {
 *     apiId: example.id,
 *     format: "SDL",
 *     definition: `type Mutation
 *
 * {
 * putPost(id: ID!,title: String! ): Post
 *
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Appsync Types using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:appsync/type:Type example api-id:format:name
 * ```
 */
class Type extends pulumi.CustomResource {
    /**
     * Get an existing Type resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Type(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Type.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Type.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apiId"] = state ? state.apiId : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["definition"] = state ? state.definition : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.definition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'definition'");
            }
            if ((!args || args.format === undefined) && !opts.urn) {
                throw new Error("Missing required property 'format'");
            }
            resourceInputs["apiId"] = args ? args.apiId : undefined;
            resourceInputs["definition"] = args ? args.definition : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Type.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Type = Type;
/** @internal */
Type.__pulumiType = 'aws:appsync/type:Type';
//# sourceMappingURL=type.js.map