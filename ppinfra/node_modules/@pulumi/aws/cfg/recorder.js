"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Recorder = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AWS Config Configuration Recorder. Please note that this resource **does not start** the created recorder automatically.
 *
 * > **Note:** _Starting_ the Configuration Recorder requires a delivery channel (while delivery channel creation requires Configuration Recorder). This is why `aws.cfg.RecorderStatus` is a separate resource.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const assumeRole = aws.iam.getPolicyDocument({
 *     statements: [{
 *         effect: "Allow",
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["config.amazonaws.com"],
 *         }],
 *         actions: ["sts:AssumeRole"],
 *     }],
 * });
 * const r = new aws.iam.Role("r", {
 *     name: "awsconfig-example",
 *     assumeRolePolicy: assumeRole.then(assumeRole => assumeRole.json),
 * });
 * const foo = new aws.cfg.Recorder("foo", {
 *     name: "example",
 *     roleArn: r.arn,
 * });
 * ```
 *
 * ### Exclude Resources Types Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foo = new aws.cfg.Recorder("foo", {
 *     name: "example",
 *     roleArn: r.arn,
 *     recordingGroup: {
 *         allSupported: false,
 *         exclusionByResourceTypes: [{
 *             resourceTypes: ["AWS::EC2::Instance"],
 *         }],
 *         recordingStrategies: [{
 *             useOnly: "EXCLUSION_BY_RESOURCE_TYPES",
 *         }],
 *     },
 * });
 * ```
 *
 * ### Periodic Recording
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foo = new aws.cfg.Recorder("foo", {
 *     name: "example",
 *     roleArn: r.arn,
 *     recordingGroup: {
 *         allSupported: false,
 *         includeGlobalResourceTypes: false,
 *         resourceTypes: [
 *             "AWS::EC2::Instance",
 *             "AWS::EC2::NetworkInterface",
 *         ],
 *     },
 *     recordingMode: {
 *         recordingFrequency: "CONTINUOUS",
 *         recordingModeOverride: {
 *             description: "Only record EC2 network interfaces daily",
 *             resourceTypes: ["AWS::EC2::NetworkInterface"],
 *             recordingFrequency: "DAILY",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Configuration Recorder using the name. For example:
 *
 * ```sh
 * $ pulumi import aws:cfg/recorder:Recorder foo example
 * ```
 */
class Recorder extends pulumi.CustomResource {
    /**
     * Get an existing Recorder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Recorder(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Recorder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Recorder.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recordingGroup"] = state ? state.recordingGroup : undefined;
            resourceInputs["recordingMode"] = state ? state.recordingMode : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recordingGroup"] = args ? args.recordingGroup : undefined;
            resourceInputs["recordingMode"] = args ? args.recordingMode : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Recorder.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Recorder = Recorder;
/** @internal */
Recorder.__pulumiType = 'aws:cfg/recorder:Recorder';
//# sourceMappingURL=recorder.js.map