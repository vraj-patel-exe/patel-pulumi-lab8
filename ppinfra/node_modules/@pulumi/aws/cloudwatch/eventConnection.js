"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventConnection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an EventBridge connection resource.
 *
 * > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.cloudwatch.EventConnection("test", {
 *     name: "ngrok-connection",
 *     description: "A connection description",
 *     authorizationType: "API_KEY",
 *     authParameters: {
 *         apiKey: {
 *             key: "x-signature",
 *             value: "1234",
 *         },
 *     },
 * });
 * ```
 *
 * ### Basic Authorization
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.cloudwatch.EventConnection("test", {
 *     name: "ngrok-connection",
 *     description: "A connection description",
 *     authorizationType: "BASIC",
 *     authParameters: {
 *         basic: {
 *             username: "user",
 *             password: "Pass1234!",
 *         },
 *     },
 * });
 * ```
 *
 * ### OAuth Authorization
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.cloudwatch.EventConnection("test", {
 *     name: "ngrok-connection",
 *     description: "A connection description",
 *     authorizationType: "OAUTH_CLIENT_CREDENTIALS",
 *     authParameters: {
 *         oauth: {
 *             authorizationEndpoint: "https://auth.url.com/endpoint",
 *             httpMethod: "GET",
 *             clientParameters: {
 *                 clientId: "1234567890",
 *                 clientSecret: "Pass1234!",
 *             },
 *             oauthHttpParameters: {
 *                 bodies: [{
 *                     key: "body-parameter-key",
 *                     value: "body-parameter-value",
 *                     isValueSecret: false,
 *                 }],
 *                 headers: [{
 *                     key: "header-parameter-key",
 *                     value: "header-parameter-value",
 *                     isValueSecret: false,
 *                 }],
 *                 queryStrings: [{
 *                     key: "query-string-parameter-key",
 *                     value: "query-string-parameter-value",
 *                     isValueSecret: false,
 *                 }],
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ### Invocation Http Parameters
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.cloudwatch.EventConnection("test", {
 *     name: "ngrok-connection",
 *     description: "A connection description",
 *     authorizationType: "BASIC",
 *     authParameters: {
 *         basic: {
 *             username: "user",
 *             password: "Pass1234!",
 *         },
 *         invocationHttpParameters: {
 *             bodies: [
 *                 {
 *                     key: "body-parameter-key",
 *                     value: "body-parameter-value",
 *                     isValueSecret: false,
 *                 },
 *                 {
 *                     key: "body-parameter-key2",
 *                     value: "body-parameter-value2",
 *                     isValueSecret: true,
 *                 },
 *             ],
 *             headers: [{
 *                 key: "header-parameter-key",
 *                 value: "header-parameter-value",
 *                 isValueSecret: false,
 *             }],
 *             queryStrings: [{
 *                 key: "query-string-parameter-key",
 *                 value: "query-string-parameter-value",
 *                 isValueSecret: false,
 *             }],
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import EventBridge EventBridge connection using the `name`. For example:
 *
 * ```sh
 * $ pulumi import aws:cloudwatch/eventConnection:EventConnection test ngrok-connection
 * ```
 */
class EventConnection extends pulumi.CustomResource {
    /**
     * Get an existing EventConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EventConnection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EventConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventConnection.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authParameters"] = state ? state.authParameters : undefined;
            resourceInputs["authorizationType"] = state ? state.authorizationType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["invocationConnectivityParameters"] = state ? state.invocationConnectivityParameters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secretArn"] = state ? state.secretArn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.authParameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authParameters'");
            }
            if ((!args || args.authorizationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizationType'");
            }
            resourceInputs["authParameters"] = args ? args.authParameters : undefined;
            resourceInputs["authorizationType"] = args ? args.authorizationType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["invocationConnectivityParameters"] = args ? args.invocationConnectivityParameters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["secretArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventConnection.__pulumiType, name, resourceInputs, opts);
    }
}
exports.EventConnection = EventConnection;
/** @internal */
EventConnection.__pulumiType = 'aws:cloudwatch/eventConnection:EventConnection';
//# sourceMappingURL=eventConnection.js.map