"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogDelivery = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS CloudWatch Logs Delivery. A delivery is a connection between an `aws.cloudwatch.LogDeliverySource` and an `aws.cloudwatch.LogDeliveryDestination`.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudwatch.LogDelivery("example", {
 *     deliverySourceName: exampleAwsCloudwatchLogDeliverySource.name,
 *     deliveryDestinationArn: exampleAwsCloudwatchLogDeliveryDestination.arn,
 *     fieldDelimiter: ",",
 *     recordFields: [
 *         "event_timestamp",
 *         "event",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import CloudWatch Logs Delivery using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:cloudwatch/logDelivery:LogDelivery example jsoGVi4Zq8VlYp9n
 * ```
 */
class LogDelivery extends pulumi.CustomResource {
    /**
     * Get an existing LogDelivery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LogDelivery(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LogDelivery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogDelivery.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["deliveryDestinationArn"] = state ? state.deliveryDestinationArn : undefined;
            resourceInputs["deliverySourceName"] = state ? state.deliverySourceName : undefined;
            resourceInputs["fieldDelimiter"] = state ? state.fieldDelimiter : undefined;
            resourceInputs["recordFields"] = state ? state.recordFields : undefined;
            resourceInputs["s3DeliveryConfigurations"] = state ? state.s3DeliveryConfigurations : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.deliveryDestinationArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deliveryDestinationArn'");
            }
            if ((!args || args.deliverySourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deliverySourceName'");
            }
            resourceInputs["deliveryDestinationArn"] = args ? args.deliveryDestinationArn : undefined;
            resourceInputs["deliverySourceName"] = args ? args.deliverySourceName : undefined;
            resourceInputs["fieldDelimiter"] = args ? args.fieldDelimiter : undefined;
            resourceInputs["recordFields"] = args ? args.recordFields : undefined;
            resourceInputs["s3DeliveryConfigurations"] = args ? args.s3DeliveryConfigurations : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogDelivery.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LogDelivery = LogDelivery;
/** @internal */
LogDelivery.__pulumiType = 'aws:cloudwatch/logDelivery:LogDelivery';
//# sourceMappingURL=logDelivery.js.map