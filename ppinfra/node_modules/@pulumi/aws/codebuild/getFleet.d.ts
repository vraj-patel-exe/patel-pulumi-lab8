import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Retrieve information about an CodeBuild Fleet.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testFleet = new aws.codebuild.Fleet("test", {
 *     baseCapacity: 2,
 *     computeType: "BUILD_GENERAL1_SMALL",
 *     environmentType: "LINUX_CONTAINER",
 *     name: "full-example-codebuild-fleet",
 *     overflowBehavior: "QUEUE",
 *     scalingConfiguration: {
 *         maxCapacity: 5,
 *         scalingType: "TARGET_TRACKING_SCALING",
 *         targetTrackingScalingConfigs: [{
 *             metricType: "FLEET_UTILIZATION_RATE",
 *             targetValue: 97.5,
 *         }],
 *     },
 * });
 * const test = aws.codebuild.getFleetOutput({
 *     name: testFleet.name,
 * });
 * ```
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.codebuild.getFleet({
 *     name: "my-codebuild-fleet-name",
 * });
 * ```
 */
export declare function getFleet(args: GetFleetArgs, opts?: pulumi.InvokeOptions): Promise<GetFleetResult>;
/**
 * A collection of arguments for invoking getFleet.
 */
export interface GetFleetArgs {
    /**
     * Fleet name.
     */
    name: string;
    /**
     * Mapping of Key-Value tags for the resource.
     */
    tags?: {
        [key: string]: string;
    };
}
/**
 * A collection of values returned by getFleet.
 */
export interface GetFleetResult {
    /**
     * ARN of the Fleet.
     */
    readonly arn: string;
    /**
     * Number of machines allocated to the ï¬‚eet.
     */
    readonly baseCapacity: number;
    /**
     * Compute configuration of the compute fleet.
     */
    readonly computeConfigurations: outputs.codebuild.GetFleetComputeConfiguration[];
    /**
     * Compute resources the compute fleet uses.
     */
    readonly computeType: string;
    /**
     * Creation time of the fleet.
     */
    readonly created: string;
    /**
     * Environment type of the compute fleet.
     */
    readonly environmentType: string;
    /**
     * The service role associated with the compute fleet.
     */
    readonly fleetServiceRole: string;
    /**
     * ARN of the Fleet.
     */
    readonly id: string;
    /**
     * The Amazon Machine Image (AMI) of the compute fleet.
     */
    readonly imageId: string;
    /**
     * Last modification time of the fleet.
     */
    readonly lastModified: string;
    readonly name: string;
    /**
     * Overflow behavior for compute fleet.
     */
    readonly overflowBehavior: string;
    /**
     * Nested attribute containing information about the scaling configuration.
     */
    readonly scalingConfigurations: outputs.codebuild.GetFleetScalingConfiguration[];
    /**
     * Nested attribute containing information about the current status of the fleet.
     */
    readonly statuses: outputs.codebuild.GetFleetStatus[];
    /**
     * Mapping of Key-Value tags for the resource.
     */
    readonly tags: {
        [key: string]: string;
    };
    /**
     * Nested attribute containing information about the VPC configuration.
     */
    readonly vpcConfigs: outputs.codebuild.GetFleetVpcConfig[];
}
/**
 * Retrieve information about an CodeBuild Fleet.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testFleet = new aws.codebuild.Fleet("test", {
 *     baseCapacity: 2,
 *     computeType: "BUILD_GENERAL1_SMALL",
 *     environmentType: "LINUX_CONTAINER",
 *     name: "full-example-codebuild-fleet",
 *     overflowBehavior: "QUEUE",
 *     scalingConfiguration: {
 *         maxCapacity: 5,
 *         scalingType: "TARGET_TRACKING_SCALING",
 *         targetTrackingScalingConfigs: [{
 *             metricType: "FLEET_UTILIZATION_RATE",
 *             targetValue: 97.5,
 *         }],
 *     },
 * });
 * const test = aws.codebuild.getFleetOutput({
 *     name: testFleet.name,
 * });
 * ```
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.codebuild.getFleet({
 *     name: "my-codebuild-fleet-name",
 * });
 * ```
 */
export declare function getFleetOutput(args: GetFleetOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetFleetResult>;
/**
 * A collection of arguments for invoking getFleet.
 */
export interface GetFleetOutputArgs {
    /**
     * Fleet name.
     */
    name: pulumi.Input<string>;
    /**
     * Mapping of Key-Value tags for the resource.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
