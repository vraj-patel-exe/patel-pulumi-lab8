import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Resource for managing an AWS CodeGuru Profiler Profiling Group.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.codeguruprofiler.ProfilingGroup("example", {
 *     name: "example",
 *     computePlatform: "Default",
 *     agentOrchestrationConfig: {
 *         profilingEnabled: true,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import CodeGuru Profiler Profiling Group using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:codeguruprofiler/profilingGroup:ProfilingGroup example profiling_group-name-12345678
 * ```
 */
export declare class ProfilingGroup extends pulumi.CustomResource {
    /**
     * Get an existing ProfilingGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProfilingGroupState, opts?: pulumi.CustomResourceOptions): ProfilingGroup;
    /**
     * Returns true if the given object is an instance of ProfilingGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ProfilingGroup;
    /**
     * Specifies whether profiling is enabled or disabled for the created profiling. See Agent Orchestration Config for more details.
     */
    readonly agentOrchestrationConfig: pulumi.Output<outputs.codeguruprofiler.ProfilingGroupAgentOrchestrationConfig | undefined>;
    /**
     * ARN of the profiling group.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Compute platform of the profiling group.
     */
    readonly computePlatform: pulumi.Output<string>;
    /**
     * Name of the profiling group.
     *
     * The following arguments are optional:
     */
    readonly name: pulumi.Output<string>;
    /**
     * Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * Create a ProfilingGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProfilingGroupArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ProfilingGroup resources.
 */
export interface ProfilingGroupState {
    /**
     * Specifies whether profiling is enabled or disabled for the created profiling. See Agent Orchestration Config for more details.
     */
    agentOrchestrationConfig?: pulumi.Input<inputs.codeguruprofiler.ProfilingGroupAgentOrchestrationConfig>;
    /**
     * ARN of the profiling group.
     */
    arn?: pulumi.Input<string>;
    /**
     * Compute platform of the profiling group.
     */
    computePlatform?: pulumi.Input<string>;
    /**
     * Name of the profiling group.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
/**
 * The set of arguments for constructing a ProfilingGroup resource.
 */
export interface ProfilingGroupArgs {
    /**
     * Specifies whether profiling is enabled or disabled for the created profiling. See Agent Orchestration Config for more details.
     */
    agentOrchestrationConfig?: pulumi.Input<inputs.codeguruprofiler.ProfilingGroupAgentOrchestrationConfig>;
    /**
     * Compute platform of the profiling group.
     */
    computePlatform?: pulumi.Input<string>;
    /**
     * Name of the profiling group.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
