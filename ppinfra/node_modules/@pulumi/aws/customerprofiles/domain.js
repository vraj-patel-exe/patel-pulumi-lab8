"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Domain = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an Amazon Customer Profiles Domain.
 * See the [Create Domain](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_CreateDomain.html) for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.customerprofiles.Domain("example", {domainName: "example"});
 * ```
 *
 * ### With SQS DLQ and KMS set
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.sqs.Queue("example", {
 *     name: "example",
 *     policy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Sid: "Customer Profiles SQS policy",
 *             Effect: "Allow",
 *             Action: ["sqs:SendMessage"],
 *             Resource: "*",
 *             Principal: {
 *                 Service: "profile.amazonaws.com",
 *             },
 *         }],
 *     }),
 * });
 * const exampleKey = new aws.kms.Key("example", {
 *     description: "example",
 *     deletionWindowInDays: 10,
 * });
 * const exampleBucketV2 = new aws.s3.BucketV2("example", {
 *     bucket: "example",
 *     forceDestroy: true,
 * });
 * const exampleBucketPolicy = new aws.s3.BucketPolicy("example", {
 *     bucket: exampleBucketV2.id,
 *     policy: pulumi.jsonStringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Sid: "Customer Profiles S3 policy",
 *             Effect: "Allow",
 *             Action: [
 *                 "s3:GetObject",
 *                 "s3:PutObject",
 *                 "s3:ListBucket",
 *             ],
 *             Resource: [
 *                 exampleBucketV2.arn,
 *                 pulumi.interpolate`${exampleBucketV2.arn}/*`,
 *             ],
 *             Principal: {
 *                 Service: "profile.amazonaws.com",
 *             },
 *         }],
 *     }),
 * });
 * const test = new aws.customerprofiles.Domain("test", {
 *     domainName: example,
 *     deadLetterQueueUrl: example.id,
 *     defaultEncryptionKey: exampleKey.arn,
 *     defaultExpirationDays: 365,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Amazon Customer Profiles Domain using the resource `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:customerprofiles/domain:Domain example e6f777be-22d0-4b40-b307-5d2720ef16b2
 * ```
 */
class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Domain(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["deadLetterQueueUrl"] = state ? state.deadLetterQueueUrl : undefined;
            resourceInputs["defaultEncryptionKey"] = state ? state.defaultEncryptionKey : undefined;
            resourceInputs["defaultExpirationDays"] = state ? state.defaultExpirationDays : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["matching"] = state ? state.matching : undefined;
            resourceInputs["ruleBasedMatching"] = state ? state.ruleBasedMatching : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.defaultExpirationDays === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultExpirationDays'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            resourceInputs["deadLetterQueueUrl"] = args ? args.deadLetterQueueUrl : undefined;
            resourceInputs["defaultEncryptionKey"] = args ? args.defaultEncryptionKey : undefined;
            resourceInputs["defaultExpirationDays"] = args ? args.defaultExpirationDays : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["matching"] = args ? args.matching : undefined;
            resourceInputs["ruleBasedMatching"] = args ? args.ruleBasedMatching : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Domain = Domain;
/** @internal */
Domain.__pulumiType = 'aws:customerprofiles/domain:Domain';
//# sourceMappingURL=domain.js.map