"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Trust = exports.SharedDirectoryAccepter = exports.SharedDirectory = exports.ServiceRegion = exports.RadiusSettings = exports.LogService = exports.getDirectoryOutput = exports.getDirectory = exports.Directory = exports.ConditionalForwader = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.ConditionalForwader = null;
utilities.lazyLoad(exports, ["ConditionalForwader"], () => require("./conditionalForwader"));
exports.Directory = null;
utilities.lazyLoad(exports, ["Directory"], () => require("./directory"));
exports.getDirectory = null;
exports.getDirectoryOutput = null;
utilities.lazyLoad(exports, ["getDirectory", "getDirectoryOutput"], () => require("./getDirectory"));
exports.LogService = null;
utilities.lazyLoad(exports, ["LogService"], () => require("./logService"));
exports.RadiusSettings = null;
utilities.lazyLoad(exports, ["RadiusSettings"], () => require("./radiusSettings"));
exports.ServiceRegion = null;
utilities.lazyLoad(exports, ["ServiceRegion"], () => require("./serviceRegion"));
exports.SharedDirectory = null;
utilities.lazyLoad(exports, ["SharedDirectory"], () => require("./sharedDirectory"));
exports.SharedDirectoryAccepter = null;
utilities.lazyLoad(exports, ["SharedDirectoryAccepter"], () => require("./sharedDirectoryAccepter"));
exports.Trust = null;
utilities.lazyLoad(exports, ["Trust"], () => require("./trust"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:directoryservice/conditionalForwader:ConditionalForwader":
                return new exports.ConditionalForwader(name, undefined, { urn });
            case "aws:directoryservice/directory:Directory":
                return new exports.Directory(name, undefined, { urn });
            case "aws:directoryservice/logService:LogService":
                return new exports.LogService(name, undefined, { urn });
            case "aws:directoryservice/radiusSettings:RadiusSettings":
                return new exports.RadiusSettings(name, undefined, { urn });
            case "aws:directoryservice/serviceRegion:ServiceRegion":
                return new exports.ServiceRegion(name, undefined, { urn });
            case "aws:directoryservice/sharedDirectory:SharedDirectory":
                return new exports.SharedDirectory(name, undefined, { urn });
            case "aws:directoryservice/sharedDirectoryAccepter:SharedDirectoryAccepter":
                return new exports.SharedDirectoryAccepter(name, undefined, { urn });
            case "aws:directoryservice/trust:Trust":
                return new exports.Trust(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "directoryservice/conditionalForwader", _module);
pulumi.runtime.registerResourceModule("aws", "directoryservice/directory", _module);
pulumi.runtime.registerResourceModule("aws", "directoryservice/logService", _module);
pulumi.runtime.registerResourceModule("aws", "directoryservice/radiusSettings", _module);
pulumi.runtime.registerResourceModule("aws", "directoryservice/serviceRegion", _module);
pulumi.runtime.registerResourceModule("aws", "directoryservice/sharedDirectory", _module);
pulumi.runtime.registerResourceModule("aws", "directoryservice/sharedDirectoryAccepter", _module);
pulumi.runtime.registerResourceModule("aws", "directoryservice/trust", _module);
//# sourceMappingURL=index.js.map