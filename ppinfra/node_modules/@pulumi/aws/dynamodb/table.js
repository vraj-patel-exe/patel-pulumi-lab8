"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a DynamoDB table resource.
 *
 * > **Note:** It is recommended to use [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) for `readCapacity` and/or `writeCapacity` if there's `autoscaling policy` attached to the table.
 *
 * > **Note:** When using aws.dynamodb.TableReplica with this resource, use `lifecycle` `ignoreChanges` for `replica`, _e.g._, `lifecycle { ignoreChanges = [replica] }`.
 *
 * ## DynamoDB Table attributes
 *
 * Only define attributes on the table object that are going to be used as:
 *
 * * Table hash key or range key
 * * LSI or GSI hash key or range key
 *
 * The DynamoDB API expects attribute structure (name and type) to be passed along when creating or updating GSI/LSIs or creating the initial table. In these cases it expects the Hash / Range keys to be provided. Because these get re-used in numerous places (i.e the table's range key could be a part of one or more GSIs), they are stored on the table object to prevent duplication and increase consistency. If you add attributes here that are not used in these scenarios it can cause an infinite loop in planning.
 *
 * ## Example Usage
 *
 * ### Basic Example
 *
 * The following dynamodb table description models the table and GSI shown in the [AWS SDK example documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const basic_dynamodb_table = new aws.dynamodb.Table("basic-dynamodb-table", {
 *     name: "GameScores",
 *     billingMode: "PROVISIONED",
 *     readCapacity: 20,
 *     writeCapacity: 20,
 *     hashKey: "UserId",
 *     rangeKey: "GameTitle",
 *     attributes: [
 *         {
 *             name: "UserId",
 *             type: "S",
 *         },
 *         {
 *             name: "GameTitle",
 *             type: "S",
 *         },
 *         {
 *             name: "TopScore",
 *             type: "N",
 *         },
 *     ],
 *     ttl: {
 *         attributeName: "TimeToExist",
 *         enabled: true,
 *     },
 *     globalSecondaryIndexes: [{
 *         name: "GameTitleIndex",
 *         hashKey: "GameTitle",
 *         rangeKey: "TopScore",
 *         writeCapacity: 10,
 *         readCapacity: 10,
 *         projectionType: "INCLUDE",
 *         nonKeyAttributes: ["UserId"],
 *     }],
 *     tags: {
 *         Name: "dynamodb-table-1",
 *         Environment: "production",
 *     },
 * });
 * ```
 *
 * ### Global Tables
 *
 * This resource implements support for [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) via `replica` configuration blocks. For working with [DynamoDB Global Tables V1 (version 2017.11.29)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html), see the `aws.dynamodb.GlobalTable` resource.
 *
 * > **Note:** aws.dynamodb.TableReplica is an alternate way of configuring Global Tables. Do not use `replica` configuration blocks of `aws.dynamodb.Table` together with aws_dynamodb_table_replica.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.dynamodb.Table("example", {
 *     name: "example",
 *     hashKey: "TestTableHashKey",
 *     billingMode: "PAY_PER_REQUEST",
 *     streamEnabled: true,
 *     streamViewType: "NEW_AND_OLD_IMAGES",
 *     attributes: [{
 *         name: "TestTableHashKey",
 *         type: "S",
 *     }],
 *     replicas: [
 *         {
 *             regionName: "us-east-2",
 *         },
 *         {
 *             regionName: "us-west-2",
 *         },
 *     ],
 * });
 * ```
 *
 * ### Replica Tagging
 *
 * You can manage global table replicas' tags in various ways. This example shows using `replica.*.propagate_tags` for the first replica and the `aws.dynamodb.Tag` resource for the other.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as std from "@pulumi/std";
 *
 * const current = aws.getRegion({});
 * const alternate = aws.getRegion({});
 * const third = aws.getRegion({});
 * const example = new aws.dynamodb.Table("example", {
 *     billingMode: "PAY_PER_REQUEST",
 *     hashKey: "TestTableHashKey",
 *     name: "example-13281",
 *     streamEnabled: true,
 *     streamViewType: "NEW_AND_OLD_IMAGES",
 *     attributes: [{
 *         name: "TestTableHashKey",
 *         type: "S",
 *     }],
 *     replicas: [
 *         {
 *             regionName: alternate.then(alternate => alternate.name),
 *         },
 *         {
 *             regionName: third.then(third => third.name),
 *             propagateTags: true,
 *         },
 *     ],
 *     tags: {
 *         Architect: "Eleanor",
 *         Zone: "SW",
 *     },
 * });
 * const exampleTag = new aws.dynamodb.Tag("example", {
 *     resourceArn: pulumi.all([example.arn, current, alternate]).apply(([arn, current, alternate]) => std.replaceOutput({
 *         text: arn,
 *         search: current.name,
 *         replace: alternate.name,
 *     })).apply(invoke => invoke.result),
 *     key: "Architect",
 *     value: "Gigi",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import DynamoDB tables using the `name`. For example:
 *
 * ```sh
 * $ pulumi import aws:dynamodb/table:Table basic-dynamodb-table GameScores
 * ```
 */
class Table extends pulumi.CustomResource {
    /**
     * Get an existing Table resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Table(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Table.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Table.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["billingMode"] = state ? state.billingMode : undefined;
            resourceInputs["deletionProtectionEnabled"] = state ? state.deletionProtectionEnabled : undefined;
            resourceInputs["globalSecondaryIndexes"] = state ? state.globalSecondaryIndexes : undefined;
            resourceInputs["hashKey"] = state ? state.hashKey : undefined;
            resourceInputs["importTable"] = state ? state.importTable : undefined;
            resourceInputs["localSecondaryIndexes"] = state ? state.localSecondaryIndexes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["onDemandThroughput"] = state ? state.onDemandThroughput : undefined;
            resourceInputs["pointInTimeRecovery"] = state ? state.pointInTimeRecovery : undefined;
            resourceInputs["rangeKey"] = state ? state.rangeKey : undefined;
            resourceInputs["readCapacity"] = state ? state.readCapacity : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["restoreDateTime"] = state ? state.restoreDateTime : undefined;
            resourceInputs["restoreSourceName"] = state ? state.restoreSourceName : undefined;
            resourceInputs["restoreSourceTableArn"] = state ? state.restoreSourceTableArn : undefined;
            resourceInputs["restoreToLatestTime"] = state ? state.restoreToLatestTime : undefined;
            resourceInputs["serverSideEncryption"] = state ? state.serverSideEncryption : undefined;
            resourceInputs["streamArn"] = state ? state.streamArn : undefined;
            resourceInputs["streamEnabled"] = state ? state.streamEnabled : undefined;
            resourceInputs["streamLabel"] = state ? state.streamLabel : undefined;
            resourceInputs["streamViewType"] = state ? state.streamViewType : undefined;
            resourceInputs["tableClass"] = state ? state.tableClass : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["writeCapacity"] = state ? state.writeCapacity : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["billingMode"] = args ? args.billingMode : undefined;
            resourceInputs["deletionProtectionEnabled"] = args ? args.deletionProtectionEnabled : undefined;
            resourceInputs["globalSecondaryIndexes"] = args ? args.globalSecondaryIndexes : undefined;
            resourceInputs["hashKey"] = args ? args.hashKey : undefined;
            resourceInputs["importTable"] = args ? args.importTable : undefined;
            resourceInputs["localSecondaryIndexes"] = args ? args.localSecondaryIndexes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["onDemandThroughput"] = args ? args.onDemandThroughput : undefined;
            resourceInputs["pointInTimeRecovery"] = args ? args.pointInTimeRecovery : undefined;
            resourceInputs["rangeKey"] = args ? args.rangeKey : undefined;
            resourceInputs["readCapacity"] = args ? args.readCapacity : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["restoreDateTime"] = args ? args.restoreDateTime : undefined;
            resourceInputs["restoreSourceName"] = args ? args.restoreSourceName : undefined;
            resourceInputs["restoreSourceTableArn"] = args ? args.restoreSourceTableArn : undefined;
            resourceInputs["restoreToLatestTime"] = args ? args.restoreToLatestTime : undefined;
            resourceInputs["serverSideEncryption"] = args ? args.serverSideEncryption : undefined;
            resourceInputs["streamEnabled"] = args ? args.streamEnabled : undefined;
            resourceInputs["streamViewType"] = args ? args.streamViewType : undefined;
            resourceInputs["tableClass"] = args ? args.tableClass : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["writeCapacity"] = args ? args.writeCapacity : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["streamArn"] = undefined /*out*/;
            resourceInputs["streamLabel"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Table.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Table = Table;
/** @internal */
Table.__pulumiType = 'aws:dynamodb/table:Table';
//# sourceMappingURL=table.js.map