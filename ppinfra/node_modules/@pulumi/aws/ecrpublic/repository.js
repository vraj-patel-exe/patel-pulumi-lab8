"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Repository = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Public Elastic Container Registry Repository.
 *
 * > **NOTE:** This resource can only be used in the `us-east-1` region.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as std from "@pulumi/std";
 *
 * const foo = new aws.ecrpublic.Repository("foo", {
 *     repositoryName: "bar",
 *     catalogData: {
 *         aboutText: "About Text",
 *         architectures: ["ARM"],
 *         description: "Description",
 *         logoImageBlob: std.filebase64({
 *             input: png,
 *         }).then(invoke => invoke.result),
 *         operatingSystems: ["Linux"],
 *         usageText: "Usage Text",
 *     },
 *     tags: {
 *         env: "production",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import ECR Public Repositories using the `repository_name`. For example:
 *
 * ```sh
 * $ pulumi import aws:ecrpublic/repository:Repository example example
 * ```
 */
class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Repository(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["catalogData"] = state ? state.catalogData : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["registryId"] = state ? state.registryId : undefined;
            resourceInputs["repositoryName"] = state ? state.repositoryName : undefined;
            resourceInputs["repositoryUri"] = state ? state.repositoryUri : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.repositoryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryName'");
            }
            resourceInputs["catalogData"] = args ? args.catalogData : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["repositoryName"] = args ? args.repositoryName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["registryId"] = undefined /*out*/;
            resourceInputs["repositoryUri"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Repository = Repository;
/** @internal */
Repository.__pulumiType = 'aws:ecrpublic/repository:Repository';
//# sourceMappingURL=repository.js.map