"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskSet = exports.TaskDefinition = exports.Tag = exports.Service = exports.getTaskExecutionOutput = exports.getTaskExecution = exports.getTaskDefinitionOutput = exports.getTaskDefinition = exports.getServiceOutput = exports.getService = exports.getContainerDefinitionOutput = exports.getContainerDefinition = exports.getClustersOutput = exports.getClusters = exports.getClusterOutput = exports.getCluster = exports.ClusterCapacityProviders = exports.Cluster = exports.CapacityProvider = exports.AccountSettingDefault = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AccountSettingDefault = null;
utilities.lazyLoad(exports, ["AccountSettingDefault"], () => require("./accountSettingDefault"));
exports.CapacityProvider = null;
utilities.lazyLoad(exports, ["CapacityProvider"], () => require("./capacityProvider"));
exports.Cluster = null;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));
exports.ClusterCapacityProviders = null;
utilities.lazyLoad(exports, ["ClusterCapacityProviders"], () => require("./clusterCapacityProviders"));
__exportStar(require("./container"), exports);
exports.getCluster = null;
exports.getClusterOutput = null;
utilities.lazyLoad(exports, ["getCluster", "getClusterOutput"], () => require("./getCluster"));
exports.getClusters = null;
exports.getClustersOutput = null;
utilities.lazyLoad(exports, ["getClusters", "getClustersOutput"], () => require("./getClusters"));
exports.getContainerDefinition = null;
exports.getContainerDefinitionOutput = null;
utilities.lazyLoad(exports, ["getContainerDefinition", "getContainerDefinitionOutput"], () => require("./getContainerDefinition"));
exports.getService = null;
exports.getServiceOutput = null;
utilities.lazyLoad(exports, ["getService", "getServiceOutput"], () => require("./getService"));
exports.getTaskDefinition = null;
exports.getTaskDefinitionOutput = null;
utilities.lazyLoad(exports, ["getTaskDefinition", "getTaskDefinitionOutput"], () => require("./getTaskDefinition"));
exports.getTaskExecution = null;
exports.getTaskExecutionOutput = null;
utilities.lazyLoad(exports, ["getTaskExecution", "getTaskExecutionOutput"], () => require("./getTaskExecution"));
exports.Service = null;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));
exports.Tag = null;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));
exports.TaskDefinition = null;
utilities.lazyLoad(exports, ["TaskDefinition"], () => require("./taskDefinition"));
exports.TaskSet = null;
utilities.lazyLoad(exports, ["TaskSet"], () => require("./taskSet"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:ecs/accountSettingDefault:AccountSettingDefault":
                return new exports.AccountSettingDefault(name, undefined, { urn });
            case "aws:ecs/capacityProvider:CapacityProvider":
                return new exports.CapacityProvider(name, undefined, { urn });
            case "aws:ecs/cluster:Cluster":
                return new exports.Cluster(name, undefined, { urn });
            case "aws:ecs/clusterCapacityProviders:ClusterCapacityProviders":
                return new exports.ClusterCapacityProviders(name, undefined, { urn });
            case "aws:ecs/service:Service":
                return new exports.Service(name, undefined, { urn });
            case "aws:ecs/tag:Tag":
                return new exports.Tag(name, undefined, { urn });
            case "aws:ecs/taskDefinition:TaskDefinition":
                return new exports.TaskDefinition(name, undefined, { urn });
            case "aws:ecs/taskSet:TaskSet":
                return new exports.TaskSet(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "ecs/accountSettingDefault", _module);
pulumi.runtime.registerResourceModule("aws", "ecs/capacityProvider", _module);
pulumi.runtime.registerResourceModule("aws", "ecs/cluster", _module);
pulumi.runtime.registerResourceModule("aws", "ecs/clusterCapacityProviders", _module);
pulumi.runtime.registerResourceModule("aws", "ecs/service", _module);
pulumi.runtime.registerResourceModule("aws", "ecs/tag", _module);
pulumi.runtime.registerResourceModule("aws", "ecs/taskDefinition", _module);
pulumi.runtime.registerResourceModule("aws", "ecs/taskSet", _module);
//# sourceMappingURL=index.js.map