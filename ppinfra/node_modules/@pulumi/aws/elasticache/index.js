"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserGroupAssociation = exports.UserGroup = exports.User = exports.SubnetGroup = exports.ServerlessCache = exports.ReservedCacheNode = exports.ReplicationGroup = exports.ParameterGroup = exports.GlobalReplicationGroup = exports.getUserOutput = exports.getUser = exports.getSubnetGroupOutput = exports.getSubnetGroup = exports.getServerlessCacheOutput = exports.getServerlessCache = exports.getReservedCacheNodeOfferingOutput = exports.getReservedCacheNodeOffering = exports.getReplicationGroupOutput = exports.getReplicationGroup = exports.getClusterOutput = exports.getCluster = exports.Cluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Cluster = null;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));
exports.getCluster = null;
exports.getClusterOutput = null;
utilities.lazyLoad(exports, ["getCluster", "getClusterOutput"], () => require("./getCluster"));
exports.getReplicationGroup = null;
exports.getReplicationGroupOutput = null;
utilities.lazyLoad(exports, ["getReplicationGroup", "getReplicationGroupOutput"], () => require("./getReplicationGroup"));
exports.getReservedCacheNodeOffering = null;
exports.getReservedCacheNodeOfferingOutput = null;
utilities.lazyLoad(exports, ["getReservedCacheNodeOffering", "getReservedCacheNodeOfferingOutput"], () => require("./getReservedCacheNodeOffering"));
exports.getServerlessCache = null;
exports.getServerlessCacheOutput = null;
utilities.lazyLoad(exports, ["getServerlessCache", "getServerlessCacheOutput"], () => require("./getServerlessCache"));
exports.getSubnetGroup = null;
exports.getSubnetGroupOutput = null;
utilities.lazyLoad(exports, ["getSubnetGroup", "getSubnetGroupOutput"], () => require("./getSubnetGroup"));
exports.getUser = null;
exports.getUserOutput = null;
utilities.lazyLoad(exports, ["getUser", "getUserOutput"], () => require("./getUser"));
exports.GlobalReplicationGroup = null;
utilities.lazyLoad(exports, ["GlobalReplicationGroup"], () => require("./globalReplicationGroup"));
exports.ParameterGroup = null;
utilities.lazyLoad(exports, ["ParameterGroup"], () => require("./parameterGroup"));
exports.ReplicationGroup = null;
utilities.lazyLoad(exports, ["ReplicationGroup"], () => require("./replicationGroup"));
exports.ReservedCacheNode = null;
utilities.lazyLoad(exports, ["ReservedCacheNode"], () => require("./reservedCacheNode"));
exports.ServerlessCache = null;
utilities.lazyLoad(exports, ["ServerlessCache"], () => require("./serverlessCache"));
exports.SubnetGroup = null;
utilities.lazyLoad(exports, ["SubnetGroup"], () => require("./subnetGroup"));
exports.User = null;
utilities.lazyLoad(exports, ["User"], () => require("./user"));
exports.UserGroup = null;
utilities.lazyLoad(exports, ["UserGroup"], () => require("./userGroup"));
exports.UserGroupAssociation = null;
utilities.lazyLoad(exports, ["UserGroupAssociation"], () => require("./userGroupAssociation"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:elasticache/cluster:Cluster":
                return new exports.Cluster(name, undefined, { urn });
            case "aws:elasticache/globalReplicationGroup:GlobalReplicationGroup":
                return new exports.GlobalReplicationGroup(name, undefined, { urn });
            case "aws:elasticache/parameterGroup:ParameterGroup":
                return new exports.ParameterGroup(name, undefined, { urn });
            case "aws:elasticache/replicationGroup:ReplicationGroup":
                return new exports.ReplicationGroup(name, undefined, { urn });
            case "aws:elasticache/reservedCacheNode:ReservedCacheNode":
                return new exports.ReservedCacheNode(name, undefined, { urn });
            case "aws:elasticache/serverlessCache:ServerlessCache":
                return new exports.ServerlessCache(name, undefined, { urn });
            case "aws:elasticache/subnetGroup:SubnetGroup":
                return new exports.SubnetGroup(name, undefined, { urn });
            case "aws:elasticache/user:User":
                return new exports.User(name, undefined, { urn });
            case "aws:elasticache/userGroup:UserGroup":
                return new exports.UserGroup(name, undefined, { urn });
            case "aws:elasticache/userGroupAssociation:UserGroupAssociation":
                return new exports.UserGroupAssociation(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "elasticache/cluster", _module);
pulumi.runtime.registerResourceModule("aws", "elasticache/globalReplicationGroup", _module);
pulumi.runtime.registerResourceModule("aws", "elasticache/parameterGroup", _module);
pulumi.runtime.registerResourceModule("aws", "elasticache/replicationGroup", _module);
pulumi.runtime.registerResourceModule("aws", "elasticache/reservedCacheNode", _module);
pulumi.runtime.registerResourceModule("aws", "elasticache/serverlessCache", _module);
pulumi.runtime.registerResourceModule("aws", "elasticache/subnetGroup", _module);
pulumi.runtime.registerResourceModule("aws", "elasticache/user", _module);
pulumi.runtime.registerResourceModule("aws", "elasticache/userGroup", _module);
pulumi.runtime.registerResourceModule("aws", "elasticache/userGroupAssociation", _module);
//# sourceMappingURL=index.js.map