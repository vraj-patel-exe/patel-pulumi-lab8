"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReservedCacheNode = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an ElastiCache Reserved Cache Node.
 *
 * > **NOTE:** Once created, a reservation is valid for the `duration` of the provided `offeringId` and cannot be deleted. Performing a `destroy` will only remove the resource from state. For more information see [ElastiCache Reserved Nodes Documentation](https://aws.amazon.com/elasticache/reserved-cache-nodes/) and [PurchaseReservedCacheNodesOffering](https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_PurchaseReservedCacheNodesOffering.html).
 *
 * > **NOTE:** Due to the expense of testing this resource, we provide it as best effort. If you find it useful, and have the ability to help test or notice issues, consider reaching out to us on GitHub.
 *
 * ## Import
 *
 * Using `pulumi import`, import ElastiCache Reserved Cache Node using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:elasticache/reservedCacheNode:ReservedCacheNode example CustomReservationID
 * ```
 */
class ReservedCacheNode extends pulumi.CustomResource {
    /**
     * Get an existing ReservedCacheNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ReservedCacheNode(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ReservedCacheNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReservedCacheNode.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cacheNodeCount"] = state ? state.cacheNodeCount : undefined;
            resourceInputs["cacheNodeType"] = state ? state.cacheNodeType : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["fixedPrice"] = state ? state.fixedPrice : undefined;
            resourceInputs["offeringType"] = state ? state.offeringType : undefined;
            resourceInputs["productDescription"] = state ? state.productDescription : undefined;
            resourceInputs["recurringCharges"] = state ? state.recurringCharges : undefined;
            resourceInputs["reservedCacheNodesOfferingId"] = state ? state.reservedCacheNodesOfferingId : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["usagePrice"] = state ? state.usagePrice : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.reservedCacheNodesOfferingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reservedCacheNodesOfferingId'");
            }
            resourceInputs["cacheNodeCount"] = args ? args.cacheNodeCount : undefined;
            resourceInputs["reservedCacheNodesOfferingId"] = args ? args.reservedCacheNodesOfferingId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["cacheNodeType"] = undefined /*out*/;
            resourceInputs["duration"] = undefined /*out*/;
            resourceInputs["fixedPrice"] = undefined /*out*/;
            resourceInputs["offeringType"] = undefined /*out*/;
            resourceInputs["productDescription"] = undefined /*out*/;
            resourceInputs["recurringCharges"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["usagePrice"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReservedCacheNode.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ReservedCacheNode = ReservedCacheNode;
/** @internal */
ReservedCacheNode.__pulumiType = 'aws:elasticache/reservedCacheNode:ReservedCacheNode';
//# sourceMappingURL=reservedCacheNode.js.map