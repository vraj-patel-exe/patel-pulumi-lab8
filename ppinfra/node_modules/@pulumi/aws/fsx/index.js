"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowsFileSystem = exports.OpenZfsVolume = exports.OpenZfsSnapshot = exports.OpenZfsFileSystem = exports.OntapVolume = exports.OntapStorageVirtualMachine = exports.OntapFileSystem = exports.LustreFileSystem = exports.getWindowsFileSystemOutput = exports.getWindowsFileSystem = exports.getOpenZfsSnapshotOutput = exports.getOpenZfsSnapshot = exports.getOntapStorageVirtualMachinesOutput = exports.getOntapStorageVirtualMachines = exports.getOntapStorageVirtualMachineOutput = exports.getOntapStorageVirtualMachine = exports.getOntapFileSystemOutput = exports.getOntapFileSystem = exports.FileCache = exports.DataRepositoryAssociation = exports.Backup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Backup = null;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));
exports.DataRepositoryAssociation = null;
utilities.lazyLoad(exports, ["DataRepositoryAssociation"], () => require("./dataRepositoryAssociation"));
exports.FileCache = null;
utilities.lazyLoad(exports, ["FileCache"], () => require("./fileCache"));
exports.getOntapFileSystem = null;
exports.getOntapFileSystemOutput = null;
utilities.lazyLoad(exports, ["getOntapFileSystem", "getOntapFileSystemOutput"], () => require("./getOntapFileSystem"));
exports.getOntapStorageVirtualMachine = null;
exports.getOntapStorageVirtualMachineOutput = null;
utilities.lazyLoad(exports, ["getOntapStorageVirtualMachine", "getOntapStorageVirtualMachineOutput"], () => require("./getOntapStorageVirtualMachine"));
exports.getOntapStorageVirtualMachines = null;
exports.getOntapStorageVirtualMachinesOutput = null;
utilities.lazyLoad(exports, ["getOntapStorageVirtualMachines", "getOntapStorageVirtualMachinesOutput"], () => require("./getOntapStorageVirtualMachines"));
exports.getOpenZfsSnapshot = null;
exports.getOpenZfsSnapshotOutput = null;
utilities.lazyLoad(exports, ["getOpenZfsSnapshot", "getOpenZfsSnapshotOutput"], () => require("./getOpenZfsSnapshot"));
exports.getWindowsFileSystem = null;
exports.getWindowsFileSystemOutput = null;
utilities.lazyLoad(exports, ["getWindowsFileSystem", "getWindowsFileSystemOutput"], () => require("./getWindowsFileSystem"));
exports.LustreFileSystem = null;
utilities.lazyLoad(exports, ["LustreFileSystem"], () => require("./lustreFileSystem"));
exports.OntapFileSystem = null;
utilities.lazyLoad(exports, ["OntapFileSystem"], () => require("./ontapFileSystem"));
exports.OntapStorageVirtualMachine = null;
utilities.lazyLoad(exports, ["OntapStorageVirtualMachine"], () => require("./ontapStorageVirtualMachine"));
exports.OntapVolume = null;
utilities.lazyLoad(exports, ["OntapVolume"], () => require("./ontapVolume"));
exports.OpenZfsFileSystem = null;
utilities.lazyLoad(exports, ["OpenZfsFileSystem"], () => require("./openZfsFileSystem"));
exports.OpenZfsSnapshot = null;
utilities.lazyLoad(exports, ["OpenZfsSnapshot"], () => require("./openZfsSnapshot"));
exports.OpenZfsVolume = null;
utilities.lazyLoad(exports, ["OpenZfsVolume"], () => require("./openZfsVolume"));
exports.WindowsFileSystem = null;
utilities.lazyLoad(exports, ["WindowsFileSystem"], () => require("./windowsFileSystem"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:fsx/backup:Backup":
                return new exports.Backup(name, undefined, { urn });
            case "aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation":
                return new exports.DataRepositoryAssociation(name, undefined, { urn });
            case "aws:fsx/fileCache:FileCache":
                return new exports.FileCache(name, undefined, { urn });
            case "aws:fsx/lustreFileSystem:LustreFileSystem":
                return new exports.LustreFileSystem(name, undefined, { urn });
            case "aws:fsx/ontapFileSystem:OntapFileSystem":
                return new exports.OntapFileSystem(name, undefined, { urn });
            case "aws:fsx/ontapStorageVirtualMachine:OntapStorageVirtualMachine":
                return new exports.OntapStorageVirtualMachine(name, undefined, { urn });
            case "aws:fsx/ontapVolume:OntapVolume":
                return new exports.OntapVolume(name, undefined, { urn });
            case "aws:fsx/openZfsFileSystem:OpenZfsFileSystem":
                return new exports.OpenZfsFileSystem(name, undefined, { urn });
            case "aws:fsx/openZfsSnapshot:OpenZfsSnapshot":
                return new exports.OpenZfsSnapshot(name, undefined, { urn });
            case "aws:fsx/openZfsVolume:OpenZfsVolume":
                return new exports.OpenZfsVolume(name, undefined, { urn });
            case "aws:fsx/windowsFileSystem:WindowsFileSystem":
                return new exports.WindowsFileSystem(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "fsx/backup", _module);
pulumi.runtime.registerResourceModule("aws", "fsx/dataRepositoryAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "fsx/fileCache", _module);
pulumi.runtime.registerResourceModule("aws", "fsx/lustreFileSystem", _module);
pulumi.runtime.registerResourceModule("aws", "fsx/ontapFileSystem", _module);
pulumi.runtime.registerResourceModule("aws", "fsx/ontapStorageVirtualMachine", _module);
pulumi.runtime.registerResourceModule("aws", "fsx/ontapVolume", _module);
pulumi.runtime.registerResourceModule("aws", "fsx/openZfsFileSystem", _module);
pulumi.runtime.registerResourceModule("aws", "fsx/openZfsSnapshot", _module);
pulumi.runtime.registerResourceModule("aws", "fsx/openZfsVolume", _module);
pulumi.runtime.registerResourceModule("aws", "fsx/windowsFileSystem", _module);
//# sourceMappingURL=index.js.map