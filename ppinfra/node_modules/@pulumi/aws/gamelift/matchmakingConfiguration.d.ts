import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Provides a GameLift Alias resource.
 *
 * ## Import
 *
 * GameLift Matchmaking Configurations can be imported using the ID, e.g.,
 *
 * ```sh
 * $ pulumi import aws:gamelift/matchmakingConfiguration:MatchmakingConfiguration example <matchmakingconfiguration-id>
 * ```
 *
 * @deprecated This resource will be removed in the next major version. Consider using https://www.pulumi.com/registry/packages/aws-native/api-docs/gamelift/matchmakingconfiguration/ instead
 */
export declare class MatchmakingConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing MatchmakingConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MatchmakingConfigurationState, opts?: pulumi.CustomResourceOptions): MatchmakingConfiguration;
    /**
     * Returns true if the given object is an instance of MatchmakingConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is MatchmakingConfiguration;
    /**
     * Specifies if the match that was created with this configuration must be accepted by matched players.
     */
    readonly acceptanceRequired: pulumi.Output<boolean | undefined>;
    /**
     * The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
     */
    readonly acceptanceTimeoutSeconds: pulumi.Output<number | undefined>;
    /**
     * The number of player slots in a match to keep open for future players.
     */
    readonly additionalPlayerCount: pulumi.Output<number | undefined>;
    /**
     * Matchmaking Configuration ARN.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The method used to backfill game sessions that are created with this matchmaking configuration.
     */
    readonly backfillMode: pulumi.Output<string | undefined>;
    /**
     * The time when the Matchmaking Configuration was created.
     */
    readonly creationTime: pulumi.Output<string>;
    /**
     * Information to be added to all events related to this matchmaking configuration.
     */
    readonly customEventData: pulumi.Output<string | undefined>;
    /**
     * A human-readable description of the matchmaking configuration.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
     */
    readonly flexMatchMode: pulumi.Output<string>;
    /**
     * One or more custom game properties. See below.
     */
    readonly gameProperties: pulumi.Output<outputs.gamelift.MatchmakingConfigurationGameProperty[] | undefined>;
    /**
     * A set of custom game session properties.
     */
    readonly gameSessionData: pulumi.Output<string | undefined>;
    /**
     * The ARNs of the GameLift game session queue resources.
     */
    readonly gameSessionQueueArns: pulumi.Output<string[] | undefined>;
    /**
     * Name of the matchmaking configuration
     */
    readonly name: pulumi.Output<string>;
    /**
     * An SNS topic ARN that is set up to receive matchmaking notifications.
     */
    readonly notificationTarget: pulumi.Output<string | undefined>;
    /**
     * The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
     */
    readonly requestTimeoutSeconds: pulumi.Output<number>;
    readonly ruleSetArn: pulumi.Output<string>;
    /**
     * A rule set names for the matchmaking rule set to use with this configuration.
     */
    readonly ruleSetName: pulumi.Output<string>;
    /**
     * Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * Create a MatchmakingConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated This resource will be removed in the next major version. Consider using https://www.pulumi.com/registry/packages/aws-native/api-docs/gamelift/matchmakingconfiguration/ instead */
    constructor(name: string, args: MatchmakingConfigurationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering MatchmakingConfiguration resources.
 */
export interface MatchmakingConfigurationState {
    /**
     * Specifies if the match that was created with this configuration must be accepted by matched players.
     */
    acceptanceRequired?: pulumi.Input<boolean>;
    /**
     * The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
     */
    acceptanceTimeoutSeconds?: pulumi.Input<number>;
    /**
     * The number of player slots in a match to keep open for future players.
     */
    additionalPlayerCount?: pulumi.Input<number>;
    /**
     * Matchmaking Configuration ARN.
     */
    arn?: pulumi.Input<string>;
    /**
     * The method used to backfill game sessions that are created with this matchmaking configuration.
     */
    backfillMode?: pulumi.Input<string>;
    /**
     * The time when the Matchmaking Configuration was created.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * Information to be added to all events related to this matchmaking configuration.
     */
    customEventData?: pulumi.Input<string>;
    /**
     * A human-readable description of the matchmaking configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
     */
    flexMatchMode?: pulumi.Input<string>;
    /**
     * One or more custom game properties. See below.
     */
    gameProperties?: pulumi.Input<pulumi.Input<inputs.gamelift.MatchmakingConfigurationGameProperty>[]>;
    /**
     * A set of custom game session properties.
     */
    gameSessionData?: pulumi.Input<string>;
    /**
     * The ARNs of the GameLift game session queue resources.
     */
    gameSessionQueueArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the matchmaking configuration
     */
    name?: pulumi.Input<string>;
    /**
     * An SNS topic ARN that is set up to receive matchmaking notifications.
     */
    notificationTarget?: pulumi.Input<string>;
    /**
     * The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
     */
    requestTimeoutSeconds?: pulumi.Input<number>;
    ruleSetArn?: pulumi.Input<string>;
    /**
     * A rule set names for the matchmaking rule set to use with this configuration.
     */
    ruleSetName?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
/**
 * The set of arguments for constructing a MatchmakingConfiguration resource.
 */
export interface MatchmakingConfigurationArgs {
    /**
     * Specifies if the match that was created with this configuration must be accepted by matched players.
     */
    acceptanceRequired?: pulumi.Input<boolean>;
    /**
     * The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
     */
    acceptanceTimeoutSeconds?: pulumi.Input<number>;
    /**
     * The number of player slots in a match to keep open for future players.
     */
    additionalPlayerCount?: pulumi.Input<number>;
    /**
     * The method used to backfill game sessions that are created with this matchmaking configuration.
     */
    backfillMode?: pulumi.Input<string>;
    /**
     * Information to be added to all events related to this matchmaking configuration.
     */
    customEventData?: pulumi.Input<string>;
    /**
     * A human-readable description of the matchmaking configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
     */
    flexMatchMode?: pulumi.Input<string>;
    /**
     * One or more custom game properties. See below.
     */
    gameProperties?: pulumi.Input<pulumi.Input<inputs.gamelift.MatchmakingConfigurationGameProperty>[]>;
    /**
     * A set of custom game session properties.
     */
    gameSessionData?: pulumi.Input<string>;
    /**
     * The ARNs of the GameLift game session queue resources.
     */
    gameSessionQueueArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the matchmaking configuration
     */
    name?: pulumi.Input<string>;
    /**
     * An SNS topic ARN that is set up to receive matchmaking notifications.
     */
    notificationTarget?: pulumi.Input<string>;
    /**
     * The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
     */
    requestTimeoutSeconds: pulumi.Input<number>;
    /**
     * A rule set names for the matchmaking rule set to use with this configuration.
     */
    ruleSetName: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
