"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MatchmakingConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a GameLift Alias resource.
 *
 * ## Import
 *
 * GameLift Matchmaking Configurations can be imported using the ID, e.g.,
 *
 * ```sh
 * $ pulumi import aws:gamelift/matchmakingConfiguration:MatchmakingConfiguration example <matchmakingconfiguration-id>
 * ```
 *
 * @deprecated This resource will be removed in the next major version. Consider using https://www.pulumi.com/registry/packages/aws-native/api-docs/gamelift/matchmakingconfiguration/ instead
 */
class MatchmakingConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing MatchmakingConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        pulumi.log.warn("MatchmakingConfiguration is deprecated: This resource will be removed in the next major version. Consider using https://www.pulumi.com/registry/packages/aws-native/api-docs/gamelift/matchmakingconfiguration/ instead");
        return new MatchmakingConfiguration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MatchmakingConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MatchmakingConfiguration.__pulumiType;
    }
    /** @deprecated This resource will be removed in the next major version. Consider using https://www.pulumi.com/registry/packages/aws-native/api-docs/gamelift/matchmakingconfiguration/ instead */
    constructor(name, argsOrState, opts) {
        pulumi.log.warn("MatchmakingConfiguration is deprecated: This resource will be removed in the next major version. Consider using https://www.pulumi.com/registry/packages/aws-native/api-docs/gamelift/matchmakingconfiguration/ instead");
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["acceptanceRequired"] = state ? state.acceptanceRequired : undefined;
            resourceInputs["acceptanceTimeoutSeconds"] = state ? state.acceptanceTimeoutSeconds : undefined;
            resourceInputs["additionalPlayerCount"] = state ? state.additionalPlayerCount : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["backfillMode"] = state ? state.backfillMode : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["customEventData"] = state ? state.customEventData : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["flexMatchMode"] = state ? state.flexMatchMode : undefined;
            resourceInputs["gameProperties"] = state ? state.gameProperties : undefined;
            resourceInputs["gameSessionData"] = state ? state.gameSessionData : undefined;
            resourceInputs["gameSessionQueueArns"] = state ? state.gameSessionQueueArns : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationTarget"] = state ? state.notificationTarget : undefined;
            resourceInputs["requestTimeoutSeconds"] = state ? state.requestTimeoutSeconds : undefined;
            resourceInputs["ruleSetArn"] = state ? state.ruleSetArn : undefined;
            resourceInputs["ruleSetName"] = state ? state.ruleSetName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.requestTimeoutSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requestTimeoutSeconds'");
            }
            if ((!args || args.ruleSetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleSetName'");
            }
            resourceInputs["acceptanceRequired"] = args ? args.acceptanceRequired : undefined;
            resourceInputs["acceptanceTimeoutSeconds"] = args ? args.acceptanceTimeoutSeconds : undefined;
            resourceInputs["additionalPlayerCount"] = args ? args.additionalPlayerCount : undefined;
            resourceInputs["backfillMode"] = args ? args.backfillMode : undefined;
            resourceInputs["customEventData"] = args ? args.customEventData : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["flexMatchMode"] = args ? args.flexMatchMode : undefined;
            resourceInputs["gameProperties"] = args ? args.gameProperties : undefined;
            resourceInputs["gameSessionData"] = args ? args.gameSessionData : undefined;
            resourceInputs["gameSessionQueueArns"] = args ? args.gameSessionQueueArns : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationTarget"] = args ? args.notificationTarget : undefined;
            resourceInputs["requestTimeoutSeconds"] = args ? args.requestTimeoutSeconds : undefined;
            resourceInputs["ruleSetName"] = args ? args.ruleSetName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["ruleSetArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MatchmakingConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}
exports.MatchmakingConfiguration = MatchmakingConfiguration;
/** @internal */
MatchmakingConfiguration.__pulumiType = 'aws:gamelift/matchmakingConfiguration:MatchmakingConfiguration';
//# sourceMappingURL=matchmakingConfiguration.js.map