"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RolePoliciesExclusive = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * > **NOTE:**: To reliably detect drift between customer managed inline policies listed in this resource and actual policies attached to the role in the cloud, you currently need to run Pulumi with `pulumi up --refresh`. See [#4766](https://github.com/pulumi/pulumi-aws/issues/4766) for tracking making this work with regular `pulumi up` invocations.
 *
 * Resource for maintaining exclusive management of inline policies assigned to an AWS IAM (Identity & Access Management) role.
 *
 * !> This resource takes exclusive ownership over inline policies assigned to a role. This includes removal of inline policies which are not explicitly configured. To prevent persistent drift, ensure any `aws.iam.RolePolicy` resources managed alongside this resource are included in the `policyNames` argument.
 *
 * > Destruction of this resource means Pulumi will no longer manage reconciliation of the configured inline policy assignments. It __will not__ delete the configured policies from the role.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.iam.RolePoliciesExclusive("example", {
 *     roleName: exampleAwsIamRole.name,
 *     policyNames: [exampleAwsIamRolePolicy.name],
 * });
 * ```
 *
 * ### Disallow Inline Policies
 *
 * To automatically remove any configured inline policies, set the `policyNames` argument to an empty list.
 *
 * > This will not __prevent__ inline policies from being assigned to a role via Pulumi (or any other interface). This resource enables bringing inline policy assignments into a configured state, however, this reconciliation happens only when `apply` is proactively run.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.iam.RolePoliciesExclusive("example", {
 *     roleName: exampleAwsIamRole.name,
 *     policyNames: [],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import exclusive management of inline policy assignments using the `role_name`. For example:
 *
 * ```sh
 * $ pulumi import aws:iam/rolePoliciesExclusive:RolePoliciesExclusive example MyRole
 * ```
 */
class RolePoliciesExclusive extends pulumi.CustomResource {
    /**
     * Get an existing RolePoliciesExclusive resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RolePoliciesExclusive(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RolePoliciesExclusive.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RolePoliciesExclusive.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["policyNames"] = state ? state.policyNames : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.policyNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyNames'");
            }
            if ((!args || args.roleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleName'");
            }
            resourceInputs["policyNames"] = args ? args.policyNames : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RolePoliciesExclusive.__pulumiType, name, resourceInputs, opts);
    }
}
exports.RolePoliciesExclusive = RolePoliciesExclusive;
/** @internal */
RolePoliciesExclusive.__pulumiType = 'aws:iam/rolePoliciesExclusive:RolePoliciesExclusive';
//# sourceMappingURL=rolePoliciesExclusive.js.map