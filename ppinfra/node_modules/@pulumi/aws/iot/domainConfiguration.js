"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates and manages an AWS IoT domain configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const iot = new aws.iot.DomainConfiguration("iot", {
 *     name: "iot-",
 *     domainName: "iot.example.com",
 *     serviceType: "DATA",
 *     serverCertificateArns: [cert.arn],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import domain configurations using the name. For example:
 *
 * ```sh
 * $ pulumi import aws:iot/domainConfiguration:DomainConfiguration example example
 * ```
 */
class DomainConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing DomainConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DomainConfiguration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DomainConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainConfiguration.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authorizerConfig"] = state ? state.authorizerConfig : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainType"] = state ? state.domainType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serverCertificateArns"] = state ? state.serverCertificateArns : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["tlsConfig"] = state ? state.tlsConfig : undefined;
            resourceInputs["validationCertificateArn"] = state ? state.validationCertificateArn : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["authorizerConfig"] = args ? args.authorizerConfig : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverCertificateArns"] = args ? args.serverCertificateArns : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tlsConfig"] = args ? args.tlsConfig : undefined;
            resourceInputs["validationCertificateArn"] = args ? args.validationCertificateArn : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["domainType"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DomainConfiguration = DomainConfiguration;
/** @internal */
DomainConfiguration.__pulumiType = 'aws:iot/domainConfiguration:DomainConfiguration';
//# sourceMappingURL=domainConfiguration.js.map