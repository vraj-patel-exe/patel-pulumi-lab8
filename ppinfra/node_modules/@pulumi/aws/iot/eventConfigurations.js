"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventConfigurations = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages IoT event configurations.
 *
 * > **NOTE:** Deleting this resource does not disable the event configurations, the resource in simply removed from state instead.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.iot.EventConfigurations("example", {eventConfigurations: {
 *     THING: true,
 *     THING_GROUP: false,
 *     THING_TYPE: false,
 *     THING_GROUP_MEMBERSHIP: false,
 *     THING_GROUP_HIERARCHY: false,
 *     THING_TYPE_ASSOCIATION: false,
 *     JOB: false,
 *     JOB_EXECUTION: false,
 *     POLICY: false,
 *     CERTIFICATE: true,
 *     CA_CERTIFICATE: false,
 * }});
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import IoT Event Configurations using the AWS Region. For example:
 *
 * ```sh
 * $ pulumi import aws:iot/eventConfigurations:EventConfigurations example us-west-2
 * ```
 */
class EventConfigurations extends pulumi.CustomResource {
    /**
     * Get an existing EventConfigurations resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EventConfigurations(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EventConfigurations.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventConfigurations.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["eventConfigurations"] = state ? state.eventConfigurations : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.eventConfigurations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventConfigurations'");
            }
            resourceInputs["eventConfigurations"] = args ? args.eventConfigurations : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventConfigurations.__pulumiType, name, resourceInputs, opts);
    }
}
exports.EventConfigurations = EventConfigurations;
/** @internal */
EventConfigurations.__pulumiType = 'aws:iot/eventConfigurations:EventConfigurations';
//# sourceMappingURL=eventConfigurations.js.map