"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Key = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a single-Region or multi-Region primary KMS key.
 *
 * > **NOTE on KMS Key Policy:** KMS Key Policy can be configured in either the standalone resource `aws.kms.KeyPolicy`
 * or with the parameter `policy` in this resource.
 * Configuring with both will cause inconsistencies and may overwrite configuration.
 *
 * ## Example Usage
 *
 * ### Symmetric Encryption KMS Key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getCallerIdentity({});
 * const example = new aws.kms.Key("example", {
 *     description: "An example symmetric encryption KMS key",
 *     enableKeyRotation: true,
 *     deletionWindowInDays: 20,
 *     policy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Id: "key-default-1",
 *         Statement: [
 *             {
 *                 Sid: "Enable IAM User Permissions",
 *                 Effect: "Allow",
 *                 Principal: {
 *                     AWS: current.then(current => `arn:aws:iam::${current.accountId}:root`),
 *                 },
 *                 Action: "kms:*",
 *                 Resource: "*",
 *             },
 *             {
 *                 Sid: "Allow administration of the key",
 *                 Effect: "Allow",
 *                 Principal: {
 *                     AWS: current.then(current => `arn:aws:iam::${current.accountId}:user/Alice`),
 *                 },
 *                 Action: [
 *                     "kms:ReplicateKey",
 *                     "kms:Create*",
 *                     "kms:Describe*",
 *                     "kms:Enable*",
 *                     "kms:List*",
 *                     "kms:Put*",
 *                     "kms:Update*",
 *                     "kms:Revoke*",
 *                     "kms:Disable*",
 *                     "kms:Get*",
 *                     "kms:Delete*",
 *                     "kms:ScheduleKeyDeletion",
 *                     "kms:CancelKeyDeletion",
 *                 ],
 *                 Resource: "*",
 *             },
 *             {
 *                 Sid: "Allow use of the key",
 *                 Effect: "Allow",
 *                 Principal: {
 *                     AWS: current.then(current => `arn:aws:iam::${current.accountId}:user/Bob`),
 *                 },
 *                 Action: [
 *                     "kms:DescribeKey",
 *                     "kms:Encrypt",
 *                     "kms:Decrypt",
 *                     "kms:ReEncrypt*",
 *                     "kms:GenerateDataKey",
 *                     "kms:GenerateDataKeyWithoutPlaintext",
 *                 ],
 *                 Resource: "*",
 *             },
 *         ],
 *     }),
 * });
 * ```
 *
 * ### Symmetric Encryption KMS Key With Standalone Policy Resource
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getCallerIdentity({});
 * const example = new aws.kms.Key("example", {
 *     description: "An example symmetric encryption KMS key",
 *     enableKeyRotation: true,
 *     deletionWindowInDays: 20,
 * });
 * const exampleKeyPolicy = new aws.kms.KeyPolicy("example", {
 *     keyId: example.id,
 *     policy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Id: "key-default-1",
 *         Statement: [{
 *             Sid: "Enable IAM User Permissions",
 *             Effect: "Allow",
 *             Principal: {
 *                 AWS: current.then(current => `arn:aws:iam::${current.accountId}:root`),
 *             },
 *             Action: "kms:*",
 *             Resource: "*",
 *         }],
 *     }),
 * });
 * ```
 *
 * ### Asymmetric KMS Key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getCallerIdentity({});
 * const example = new aws.kms.Key("example", {
 *     description: "RSA-3072 asymmetric KMS key for signing and verification",
 *     customerMasterKeySpec: "RSA_3072",
 *     keyUsage: "SIGN_VERIFY",
 *     enableKeyRotation: false,
 *     policy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Id: "key-default-1",
 *         Statement: [
 *             {
 *                 Sid: "Enable IAM User Permissions",
 *                 Effect: "Allow",
 *                 Principal: {
 *                     AWS: current.then(current => `arn:aws:iam::${current.accountId}:root`),
 *                 },
 *                 Action: "kms:*",
 *                 Resource: "*",
 *             },
 *             {
 *                 Sid: "Allow administration of the key",
 *                 Effect: "Allow",
 *                 Principal: {
 *                     AWS: current.then(current => `arn:aws:iam::${current.accountId}:role/Admin`),
 *                 },
 *                 Action: [
 *                     "kms:Create*",
 *                     "kms:Describe*",
 *                     "kms:Enable*",
 *                     "kms:List*",
 *                     "kms:Put*",
 *                     "kms:Update*",
 *                     "kms:Revoke*",
 *                     "kms:Disable*",
 *                     "kms:Get*",
 *                     "kms:Delete*",
 *                     "kms:ScheduleKeyDeletion",
 *                     "kms:CancelKeyDeletion",
 *                 ],
 *                 Resource: "*",
 *             },
 *             {
 *                 Sid: "Allow use of the key",
 *                 Effect: "Allow",
 *                 Principal: {
 *                     AWS: current.then(current => `arn:aws:iam::${current.accountId}:role/Developer`),
 *                 },
 *                 Action: [
 *                     "kms:Sign",
 *                     "kms:Verify",
 *                     "kms:DescribeKey",
 *                 ],
 *                 Resource: "*",
 *             },
 *         ],
 *     }),
 * });
 * ```
 *
 * ### HMAC KMS key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getCallerIdentity({});
 * const example = new aws.kms.Key("example", {
 *     description: "HMAC_384 key for tokens",
 *     customerMasterKeySpec: "HMAC_384",
 *     keyUsage: "GENERATE_VERIFY_MAC",
 *     enableKeyRotation: false,
 *     policy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Id: "key-default-1",
 *         Statement: [
 *             {
 *                 Sid: "Enable IAM User Permissions",
 *                 Effect: "Allow",
 *                 Principal: {
 *                     AWS: current.then(current => `arn:aws:iam::${current.accountId}:root`),
 *                 },
 *                 Action: "kms:*",
 *                 Resource: "*",
 *             },
 *             {
 *                 Sid: "Allow administration of the key",
 *                 Effect: "Allow",
 *                 Principal: {
 *                     AWS: current.then(current => `arn:aws:iam::${current.accountId}:role/Admin`),
 *                 },
 *                 Action: [
 *                     "kms:Create*",
 *                     "kms:Describe*",
 *                     "kms:Enable*",
 *                     "kms:List*",
 *                     "kms:Put*",
 *                     "kms:Update*",
 *                     "kms:Revoke*",
 *                     "kms:Disable*",
 *                     "kms:Get*",
 *                     "kms:Delete*",
 *                     "kms:ScheduleKeyDeletion",
 *                     "kms:CancelKeyDeletion",
 *                 ],
 *                 Resource: "*",
 *             },
 *             {
 *                 Sid: "Allow use of the key",
 *                 Effect: "Allow",
 *                 Principal: {
 *                     AWS: current.then(current => `arn:aws:iam::${current.accountId}:role/Developer`),
 *                 },
 *                 Action: [
 *                     "kms:GenerateMac",
 *                     "kms:VerifyMac",
 *                     "kms:DescribeKey",
 *                 ],
 *                 Resource: "*",
 *             },
 *         ],
 *     }),
 * });
 * ```
 *
 * ### Multi-Region Primary Key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getCallerIdentity({});
 * const example = new aws.kms.Key("example", {
 *     description: "An example multi-Region primary key",
 *     multiRegion: true,
 *     enableKeyRotation: true,
 *     deletionWindowInDays: 10,
 *     policy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Id: "key-default-1",
 *         Statement: [
 *             {
 *                 Sid: "Enable IAM User Permissions",
 *                 Effect: "Allow",
 *                 Principal: {
 *                     AWS: current.then(current => `arn:aws:iam::${current.accountId}:root`),
 *                 },
 *                 Action: "kms:*",
 *                 Resource: "*",
 *             },
 *             {
 *                 Sid: "Allow administration of the key",
 *                 Effect: "Allow",
 *                 Principal: {
 *                     AWS: current.then(current => `arn:aws:iam::${current.accountId}:user/Alice`),
 *                 },
 *                 Action: [
 *                     "kms:ReplicateKey",
 *                     "kms:Create*",
 *                     "kms:Describe*",
 *                     "kms:Enable*",
 *                     "kms:List*",
 *                     "kms:Put*",
 *                     "kms:Update*",
 *                     "kms:Revoke*",
 *                     "kms:Disable*",
 *                     "kms:Get*",
 *                     "kms:Delete*",
 *                     "kms:ScheduleKeyDeletion",
 *                     "kms:CancelKeyDeletion",
 *                 ],
 *                 Resource: "*",
 *             },
 *             {
 *                 Sid: "Allow use of the key",
 *                 Effect: "Allow",
 *                 Principal: {
 *                     AWS: current.then(current => `arn:aws:iam::${current.accountId}:user/Bob`),
 *                 },
 *                 Action: [
 *                     "kms:DescribeKey",
 *                     "kms:Encrypt",
 *                     "kms:Decrypt",
 *                     "kms:ReEncrypt*",
 *                     "kms:GenerateDataKey",
 *                     "kms:GenerateDataKeyWithoutPlaintext",
 *                 ],
 *                 Resource: "*",
 *             },
 *         ],
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import KMS Keys using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:kms/key:Key a 1234abcd-12ab-34cd-56ef-1234567890ab
 * ```
 */
class Key extends pulumi.CustomResource {
    /**
     * Get an existing Key resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Key(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Key.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Key.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["bypassPolicyLockoutSafetyCheck"] = state ? state.bypassPolicyLockoutSafetyCheck : undefined;
            resourceInputs["customKeyStoreId"] = state ? state.customKeyStoreId : undefined;
            resourceInputs["customerMasterKeySpec"] = state ? state.customerMasterKeySpec : undefined;
            resourceInputs["deletionWindowInDays"] = state ? state.deletionWindowInDays : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableKeyRotation"] = state ? state.enableKeyRotation : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyUsage"] = state ? state.keyUsage : undefined;
            resourceInputs["multiRegion"] = state ? state.multiRegion : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["rotationPeriodInDays"] = state ? state.rotationPeriodInDays : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["xksKeyId"] = state ? state.xksKeyId : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["bypassPolicyLockoutSafetyCheck"] = args ? args.bypassPolicyLockoutSafetyCheck : undefined;
            resourceInputs["customKeyStoreId"] = args ? args.customKeyStoreId : undefined;
            resourceInputs["customerMasterKeySpec"] = args ? args.customerMasterKeySpec : undefined;
            resourceInputs["deletionWindowInDays"] = args ? args.deletionWindowInDays : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableKeyRotation"] = args ? args.enableKeyRotation : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["keyUsage"] = args ? args.keyUsage : undefined;
            resourceInputs["multiRegion"] = args ? args.multiRegion : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["rotationPeriodInDays"] = args ? args.rotationPeriodInDays : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["xksKeyId"] = args ? args.xksKeyId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["keyId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Key.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Key = Key;
/** @internal */
Key.__pulumiType = 'aws:kms/key:Key';
//# sourceMappingURL=key.js.map