"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReplicaExternalKey = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a KMS multi-Region replica key that uses external key material.
 * See the [AWS KMS Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-import.html) for more information on importing key material into multi-Region keys.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const primary = new aws.kms.ExternalKey("primary", {
 *     description: "Multi-Region primary key",
 *     deletionWindowInDays: 30,
 *     multiRegion: true,
 *     enabled: true,
 *     keyMaterialBase64: "...",
 * });
 * const replica = new aws.kms.ReplicaExternalKey("replica", {
 *     description: "Multi-Region replica key",
 *     deletionWindowInDays: 7,
 *     primaryKeyArn: primaryAwsKmsExternal.arn,
 *     keyMaterialBase64: "...",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import KMS multi-Region replica keys using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:kms/replicaExternalKey:ReplicaExternalKey example 1234abcd-12ab-34cd-56ef-1234567890ab
 * ```
 */
class ReplicaExternalKey extends pulumi.CustomResource {
    /**
     * Get an existing ReplicaExternalKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ReplicaExternalKey(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ReplicaExternalKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReplicaExternalKey.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["bypassPolicyLockoutSafetyCheck"] = state ? state.bypassPolicyLockoutSafetyCheck : undefined;
            resourceInputs["deletionWindowInDays"] = state ? state.deletionWindowInDays : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["expirationModel"] = state ? state.expirationModel : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyMaterialBase64"] = state ? state.keyMaterialBase64 : undefined;
            resourceInputs["keyState"] = state ? state.keyState : undefined;
            resourceInputs["keyUsage"] = state ? state.keyUsage : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["primaryKeyArn"] = state ? state.primaryKeyArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["validTo"] = state ? state.validTo : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.primaryKeyArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryKeyArn'");
            }
            resourceInputs["bypassPolicyLockoutSafetyCheck"] = args ? args.bypassPolicyLockoutSafetyCheck : undefined;
            resourceInputs["deletionWindowInDays"] = args ? args.deletionWindowInDays : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["keyMaterialBase64"] = (args === null || args === void 0 ? void 0 : args.keyMaterialBase64) ? pulumi.secret(args.keyMaterialBase64) : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["primaryKeyArn"] = args ? args.primaryKeyArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["validTo"] = args ? args.validTo : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["expirationModel"] = undefined /*out*/;
            resourceInputs["keyId"] = undefined /*out*/;
            resourceInputs["keyState"] = undefined /*out*/;
            resourceInputs["keyUsage"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["keyMaterialBase64"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ReplicaExternalKey.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ReplicaExternalKey = ReplicaExternalKey;
/** @internal */
ReplicaExternalKey.__pulumiType = 'aws:kms/replicaExternalKey:ReplicaExternalKey';
//# sourceMappingURL=replicaExternalKey.js.map