"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataCellsFilter = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS Lake Formation Data Cells Filter.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lakeformation.DataCellsFilter("example", {tableData: {
 *     databaseName: test.name,
 *     name: "example",
 *     tableCatalogId: current.accountId,
 *     tableName: testAwsGlueCatalogTable.name,
 *     columnNames: ["my_column"],
 *     rowFilter: {
 *         filterExpression: "my_column='example'",
 *     },
 * }});
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Lake Formation Data Cells Filter using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:lakeformation/dataCellsFilter:DataCellsFilter example database_name,name,table_catalog_id,table_name
 * ```
 */
class DataCellsFilter extends pulumi.CustomResource {
    /**
     * Get an existing DataCellsFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DataCellsFilter(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DataCellsFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataCellsFilter.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["tableData"] = state ? state.tableData : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["tableData"] = args ? args.tableData : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataCellsFilter.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DataCellsFilter = DataCellsFilter;
/** @internal */
DataCellsFilter.__pulumiType = 'aws:lakeformation/dataCellsFilter:DataCellsFilter';
//# sourceMappingURL=dataCellsFilter.js.map