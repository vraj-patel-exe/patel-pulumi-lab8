import * as pulumi from "@pulumi/pulumi";
/**
 * Resource for managing an AWS Lambda Function Recursion Config.
 *
 * > Destruction of this resource will return the `recursiveLoop` configuration back to the default value of `Terminate`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lambda.FunctionRecursionConfig("example", {
 *     functionName: "SomeFunction",
 *     recursiveLoop: "Allow",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import AWS Lambda Function Recursion Config using the `function_name`. For example:
 *
 * ```sh
 * $ pulumi import aws:lambda/functionRecursionConfig:FunctionRecursionConfig example SomeFunction
 * ```
 */
export declare class FunctionRecursionConfig extends pulumi.CustomResource {
    /**
     * Get an existing FunctionRecursionConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionRecursionConfigState, opts?: pulumi.CustomResourceOptions): FunctionRecursionConfig;
    /**
     * Returns true if the given object is an instance of FunctionRecursionConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is FunctionRecursionConfig;
    /**
     * Lambda function name.
     */
    readonly functionName: pulumi.Output<string>;
    /**
     * Lambda function recursion configuration. Valid values are `Allow` or `Terminate`.
     */
    readonly recursiveLoop: pulumi.Output<string>;
    /**
     * Create a FunctionRecursionConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionRecursionConfigArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering FunctionRecursionConfig resources.
 */
export interface FunctionRecursionConfigState {
    /**
     * Lambda function name.
     */
    functionName?: pulumi.Input<string>;
    /**
     * Lambda function recursion configuration. Valid values are `Allow` or `Terminate`.
     */
    recursiveLoop?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a FunctionRecursionConfig resource.
 */
export interface FunctionRecursionConfigArgs {
    /**
     * Lambda function name.
     */
    functionName: pulumi.Input<string>;
    /**
     * Lambda function recursion configuration. Valid values are `Allow` or `Terminate`.
     */
    recursiveLoop: pulumi.Input<string>;
}
