"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionUrl = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Lambda function URL resource. A function URL is a dedicated HTTP(S) endpoint for a Lambda function.
 *
 * See the [AWS Lambda documentation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html) for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testLatest = new aws.lambda.FunctionUrl("test_latest", {
 *     functionName: test.functionName,
 *     authorizationType: "NONE",
 * });
 * const testLive = new aws.lambda.FunctionUrl("test_live", {
 *     functionName: test.functionName,
 *     qualifier: "my_alias",
 *     authorizationType: "AWS_IAM",
 *     cors: {
 *         allowCredentials: true,
 *         allowOrigins: ["*"],
 *         allowMethods: ["*"],
 *         allowHeaders: [
 *             "date",
 *             "keep-alive",
 *         ],
 *         exposeHeaders: [
 *             "keep-alive",
 *             "date",
 *         ],
 *         maxAge: 86400,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Lambda function URLs using the `function_name` or `function_name/qualifier`. For example:
 *
 * ```sh
 * $ pulumi import aws:lambda/functionUrl:FunctionUrl test_lambda_url my_test_lambda_function
 * ```
 */
class FunctionUrl extends pulumi.CustomResource {
    /**
     * Get an existing FunctionUrl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FunctionUrl(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FunctionUrl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionUrl.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authorizationType"] = state ? state.authorizationType : undefined;
            resourceInputs["cors"] = state ? state.cors : undefined;
            resourceInputs["functionArn"] = state ? state.functionArn : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["functionUrl"] = state ? state.functionUrl : undefined;
            resourceInputs["invokeMode"] = state ? state.invokeMode : undefined;
            resourceInputs["qualifier"] = state ? state.qualifier : undefined;
            resourceInputs["urlId"] = state ? state.urlId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.authorizationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizationType'");
            }
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            resourceInputs["authorizationType"] = args ? args.authorizationType : undefined;
            resourceInputs["cors"] = args ? args.cors : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["invokeMode"] = args ? args.invokeMode : undefined;
            resourceInputs["qualifier"] = args ? args.qualifier : undefined;
            resourceInputs["functionArn"] = undefined /*out*/;
            resourceInputs["functionUrl"] = undefined /*out*/;
            resourceInputs["urlId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FunctionUrl.__pulumiType, name, resourceInputs, opts);
    }
}
exports.FunctionUrl = FunctionUrl;
/** @internal */
FunctionUrl.__pulumiType = 'aws:lambda/functionUrl:FunctionUrl';
//# sourceMappingURL=functionUrl.js.map