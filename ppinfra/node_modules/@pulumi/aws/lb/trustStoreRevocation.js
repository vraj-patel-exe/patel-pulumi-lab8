"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrustStoreRevocation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a ELBv2 Trust Store Revocation for use with Application Load Balancer Listener resources.
 *
 * ## Example Usage
 *
 * ### Trust Store With Revocations
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.lb.TrustStore("test", {
 *     name: "tf-example-lb-ts",
 *     caCertificatesBundleS3Bucket: "...",
 *     caCertificatesBundleS3Key: "...",
 * });
 * const testTrustStoreRevocation = new aws.lb.TrustStoreRevocation("test", {
 *     trustStoreArn: test.arn,
 *     revocationsS3Bucket: "...",
 *     revocationsS3Key: "...",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Trust Store Revocations using their ARN. For example:
 *
 * ```sh
 * $ pulumi import aws:lb/trustStoreRevocation:TrustStoreRevocation example arn:aws:elasticloadbalancing:us-west-2:187416307283:truststore/my-trust-store/20cfe21448b66314,6
 * ```
 */
class TrustStoreRevocation extends pulumi.CustomResource {
    /**
     * Get an existing TrustStoreRevocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TrustStoreRevocation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TrustStoreRevocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrustStoreRevocation.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["revocationId"] = state ? state.revocationId : undefined;
            resourceInputs["revocationsS3Bucket"] = state ? state.revocationsS3Bucket : undefined;
            resourceInputs["revocationsS3Key"] = state ? state.revocationsS3Key : undefined;
            resourceInputs["revocationsS3ObjectVersion"] = state ? state.revocationsS3ObjectVersion : undefined;
            resourceInputs["trustStoreArn"] = state ? state.trustStoreArn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.revocationsS3Bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'revocationsS3Bucket'");
            }
            if ((!args || args.revocationsS3Key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'revocationsS3Key'");
            }
            if ((!args || args.trustStoreArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustStoreArn'");
            }
            resourceInputs["revocationsS3Bucket"] = args ? args.revocationsS3Bucket : undefined;
            resourceInputs["revocationsS3Key"] = args ? args.revocationsS3Key : undefined;
            resourceInputs["revocationsS3ObjectVersion"] = args ? args.revocationsS3ObjectVersion : undefined;
            resourceInputs["trustStoreArn"] = args ? args.trustStoreArn : undefined;
            resourceInputs["revocationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrustStoreRevocation.__pulumiType, name, resourceInputs, opts);
    }
}
exports.TrustStoreRevocation = TrustStoreRevocation;
/** @internal */
TrustStoreRevocation.__pulumiType = 'aws:lb/trustStoreRevocation:TrustStoreRevocation';
//# sourceMappingURL=trustStoreRevocation.js.map