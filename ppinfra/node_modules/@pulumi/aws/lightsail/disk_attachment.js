"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Disk_attachment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Attaches a Lightsail disk to a Lightsail Instance
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const available = aws.getAvailabilityZones({
 *     state: "available",
 *     filters: [{
 *         name: "opt-in-status",
 *         values: ["opt-in-not-required"],
 *     }],
 * });
 * const test = new aws.lightsail.Disk("test", {
 *     name: "test-disk",
 *     sizeInGb: 8,
 *     availabilityZone: available.then(available => available.names?.[0]),
 * });
 * const testInstance = new aws.lightsail.Instance("test", {
 *     name: "test-instance",
 *     availabilityZone: available.then(available => available.names?.[0]),
 *     blueprintId: "amazon_linux_2",
 *     bundleId: "nano_3_0",
 * });
 * const testDisk_attachment = new aws.lightsail.Disk_attachment("test", {
 *     diskName: test.name,
 *     instanceName: testInstance.name,
 *     diskPath: "/dev/xvdf",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_lightsail_disk` using the id attribute. For example:
 *
 * ```sh
 * $ pulumi import aws:lightsail/disk_attachment:Disk_attachment test test-disk,test-instance
 * ```
 */
class Disk_attachment extends pulumi.CustomResource {
    /**
     * Get an existing Disk_attachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Disk_attachment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Disk_attachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Disk_attachment.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["diskName"] = state ? state.diskName : undefined;
            resourceInputs["diskPath"] = state ? state.diskPath : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.diskName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskName'");
            }
            if ((!args || args.diskPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskPath'");
            }
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            resourceInputs["diskName"] = args ? args.diskName : undefined;
            resourceInputs["diskPath"] = args ? args.diskPath : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Disk_attachment.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Disk_attachment = Disk_attachment;
/** @internal */
Disk_attachment.__pulumiType = 'aws:lightsail/disk_attachment:Disk_attachment';
//# sourceMappingURL=disk_attachment.js.map