import * as pulumi from "@pulumi/pulumi";
/**
 * Configures Https Redirection for a Lightsail Load Balancer. A valid Certificate must be attached to the load balancer in order to enable https redirection.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.lightsail.Lb("test", {
 *     name: "test-load-balancer",
 *     healthCheckPath: "/",
 *     instancePort: 80,
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * const testLbCertificate = new aws.lightsail.LbCertificate("test", {
 *     name: "test-load-balancer-certificate",
 *     lbName: test.id,
 *     domainName: "test.com",
 * });
 * const testLbCertificateAttachment = new aws.lightsail.LbCertificateAttachment("test", {
 *     lbName: test.name,
 *     certificateName: testLbCertificate.name,
 * });
 * const testLbHttpsRedirectionPolicy = new aws.lightsail.LbHttpsRedirectionPolicy("test", {
 *     lbName: test.name,
 *     enabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_lightsail_lb_https_redirection_policy` using the `lb_name` attribute. For example:
 *
 * ```sh
 * $ pulumi import aws:lightsail/lbHttpsRedirectionPolicy:LbHttpsRedirectionPolicy test example-load-balancer
 * ```
 */
export declare class LbHttpsRedirectionPolicy extends pulumi.CustomResource {
    /**
     * Get an existing LbHttpsRedirectionPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbHttpsRedirectionPolicyState, opts?: pulumi.CustomResourceOptions): LbHttpsRedirectionPolicy;
    /**
     * Returns true if the given object is an instance of LbHttpsRedirectionPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LbHttpsRedirectionPolicy;
    /**
     * The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
     */
    readonly enabled: pulumi.Output<boolean>;
    /**
     * The name of the load balancer to which you want to enable http to https redirection.
     */
    readonly lbName: pulumi.Output<string>;
    /**
     * Create a LbHttpsRedirectionPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbHttpsRedirectionPolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering LbHttpsRedirectionPolicy resources.
 */
export interface LbHttpsRedirectionPolicyState {
    /**
     * The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the load balancer to which you want to enable http to https redirection.
     */
    lbName?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a LbHttpsRedirectionPolicy resource.
 */
export interface LbHttpsRedirectionPolicyArgs {
    /**
     * The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The name of the load balancer to which you want to enable http to https redirection.
     */
    lbName: pulumi.Input<string>;
}
