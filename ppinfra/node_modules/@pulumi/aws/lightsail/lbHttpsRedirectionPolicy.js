"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LbHttpsRedirectionPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Configures Https Redirection for a Lightsail Load Balancer. A valid Certificate must be attached to the load balancer in order to enable https redirection.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.lightsail.Lb("test", {
 *     name: "test-load-balancer",
 *     healthCheckPath: "/",
 *     instancePort: 80,
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * const testLbCertificate = new aws.lightsail.LbCertificate("test", {
 *     name: "test-load-balancer-certificate",
 *     lbName: test.id,
 *     domainName: "test.com",
 * });
 * const testLbCertificateAttachment = new aws.lightsail.LbCertificateAttachment("test", {
 *     lbName: test.name,
 *     certificateName: testLbCertificate.name,
 * });
 * const testLbHttpsRedirectionPolicy = new aws.lightsail.LbHttpsRedirectionPolicy("test", {
 *     lbName: test.name,
 *     enabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_lightsail_lb_https_redirection_policy` using the `lb_name` attribute. For example:
 *
 * ```sh
 * $ pulumi import aws:lightsail/lbHttpsRedirectionPolicy:LbHttpsRedirectionPolicy test example-load-balancer
 * ```
 */
class LbHttpsRedirectionPolicy extends pulumi.CustomResource {
    /**
     * Get an existing LbHttpsRedirectionPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LbHttpsRedirectionPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LbHttpsRedirectionPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbHttpsRedirectionPolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["lbName"] = state ? state.lbName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.lbName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lbName'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["lbName"] = args ? args.lbName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbHttpsRedirectionPolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LbHttpsRedirectionPolicy = LbHttpsRedirectionPolicy;
/** @internal */
LbHttpsRedirectionPolicy.__pulumiType = 'aws:lightsail/lbHttpsRedirectionPolicy:LbHttpsRedirectionPolicy';
//# sourceMappingURL=lbHttpsRedirectionPolicy.js.map