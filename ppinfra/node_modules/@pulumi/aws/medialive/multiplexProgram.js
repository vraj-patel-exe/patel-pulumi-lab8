"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiplexProgram = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS MediaLive MultiplexProgram.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const available = aws.getAvailabilityZones({
 *     state: "available",
 * });
 * const example = new aws.medialive.Multiplex("example", {
 *     name: "example-multiplex-changed",
 *     availabilityZones: [
 *         available.then(available => available.names?.[0]),
 *         available.then(available => available.names?.[1]),
 *     ],
 *     multiplexSettings: {
 *         transportStreamBitrate: 1000000,
 *         transportStreamId: 1,
 *         transportStreamReservedBitrate: 1,
 *         maximumVideoBufferDelayMilliseconds: 1000,
 *     },
 *     startMultiplex: true,
 *     tags: {
 *         tag1: "value1",
 *     },
 * });
 * const exampleMultiplexProgram = new aws.medialive.MultiplexProgram("example", {
 *     programName: "example_program",
 *     multiplexId: example.id,
 *     multiplexProgramSettings: {
 *         programNumber: 1,
 *         preferredChannelPipeline: "CURRENTLY_ACTIVE",
 *         videoSettings: {
 *             constantBitrate: 100000,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import MediaLive MultiplexProgram using the `id`, or a combination of "`program_name`/`multiplex_id`". For example:
 *
 * ```sh
 * $ pulumi import aws:medialive/multiplexProgram:MultiplexProgram example example_program/1234567
 * ```
 */
class MultiplexProgram extends pulumi.CustomResource {
    /**
     * Get an existing MultiplexProgram resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MultiplexProgram(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MultiplexProgram.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MultiplexProgram.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["multiplexId"] = state ? state.multiplexId : undefined;
            resourceInputs["multiplexProgramSettings"] = state ? state.multiplexProgramSettings : undefined;
            resourceInputs["programName"] = state ? state.programName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.multiplexId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'multiplexId'");
            }
            if ((!args || args.programName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'programName'");
            }
            resourceInputs["multiplexId"] = args ? args.multiplexId : undefined;
            resourceInputs["multiplexProgramSettings"] = args ? args.multiplexProgramSettings : undefined;
            resourceInputs["programName"] = args ? args.programName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MultiplexProgram.__pulumiType, name, resourceInputs, opts);
    }
}
exports.MultiplexProgram = MultiplexProgram;
/** @internal */
MultiplexProgram.__pulumiType = 'aws:medialive/multiplexProgram:MultiplexProgram';
//# sourceMappingURL=multiplexProgram.js.map