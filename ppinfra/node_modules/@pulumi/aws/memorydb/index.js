"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = exports.SubnetGroup = exports.Snapshot = exports.ParameterGroup = exports.MultiRegionCluster = exports.getUserOutput = exports.getUser = exports.getSubnetGroupOutput = exports.getSubnetGroup = exports.getSnapshotOutput = exports.getSnapshot = exports.getParameterGroupOutput = exports.getParameterGroup = exports.getClusterOutput = exports.getCluster = exports.getAclOutput = exports.getAcl = exports.Cluster = exports.Acl = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Acl = null;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));
exports.Cluster = null;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));
exports.getAcl = null;
exports.getAclOutput = null;
utilities.lazyLoad(exports, ["getAcl", "getAclOutput"], () => require("./getAcl"));
exports.getCluster = null;
exports.getClusterOutput = null;
utilities.lazyLoad(exports, ["getCluster", "getClusterOutput"], () => require("./getCluster"));
exports.getParameterGroup = null;
exports.getParameterGroupOutput = null;
utilities.lazyLoad(exports, ["getParameterGroup", "getParameterGroupOutput"], () => require("./getParameterGroup"));
exports.getSnapshot = null;
exports.getSnapshotOutput = null;
utilities.lazyLoad(exports, ["getSnapshot", "getSnapshotOutput"], () => require("./getSnapshot"));
exports.getSubnetGroup = null;
exports.getSubnetGroupOutput = null;
utilities.lazyLoad(exports, ["getSubnetGroup", "getSubnetGroupOutput"], () => require("./getSubnetGroup"));
exports.getUser = null;
exports.getUserOutput = null;
utilities.lazyLoad(exports, ["getUser", "getUserOutput"], () => require("./getUser"));
exports.MultiRegionCluster = null;
utilities.lazyLoad(exports, ["MultiRegionCluster"], () => require("./multiRegionCluster"));
exports.ParameterGroup = null;
utilities.lazyLoad(exports, ["ParameterGroup"], () => require("./parameterGroup"));
exports.Snapshot = null;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));
exports.SubnetGroup = null;
utilities.lazyLoad(exports, ["SubnetGroup"], () => require("./subnetGroup"));
exports.User = null;
utilities.lazyLoad(exports, ["User"], () => require("./user"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:memorydb/acl:Acl":
                return new exports.Acl(name, undefined, { urn });
            case "aws:memorydb/cluster:Cluster":
                return new exports.Cluster(name, undefined, { urn });
            case "aws:memorydb/multiRegionCluster:MultiRegionCluster":
                return new exports.MultiRegionCluster(name, undefined, { urn });
            case "aws:memorydb/parameterGroup:ParameterGroup":
                return new exports.ParameterGroup(name, undefined, { urn });
            case "aws:memorydb/snapshot:Snapshot":
                return new exports.Snapshot(name, undefined, { urn });
            case "aws:memorydb/subnetGroup:SubnetGroup":
                return new exports.SubnetGroup(name, undefined, { urn });
            case "aws:memorydb/user:User":
                return new exports.User(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "memorydb/acl", _module);
pulumi.runtime.registerResourceModule("aws", "memorydb/cluster", _module);
pulumi.runtime.registerResourceModule("aws", "memorydb/multiRegionCluster", _module);
pulumi.runtime.registerResourceModule("aws", "memorydb/parameterGroup", _module);
pulumi.runtime.registerResourceModule("aws", "memorydb/snapshot", _module);
pulumi.runtime.registerResourceModule("aws", "memorydb/subnetGroup", _module);
pulumi.runtime.registerResourceModule("aws", "memorydb/user", _module);
//# sourceMappingURL=index.js.map