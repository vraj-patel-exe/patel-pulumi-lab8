"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Graph = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The AWS::NeptuneGraph::Graph resource creates an Amazon Analytics Graph.
 *
 * ## Example Usage
 *
 * ### Neptune Graph (with Vector Search configuration)
 *
 * Creates a Neptune Graph with 16GB provisioned memory, vector search capability with 128 dimensions, and a single replica for high availability.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // Create Neptune Graph
 * const example = new aws.neptunegraph.Graph("example", {
 *     graphName: "example-graph-test-20250203",
 *     provisionedMemory: 16,
 *     deletionProtection: false,
 *     publicConnectivity: false,
 *     replicaCount: 1,
 *     kmsKeyIdentifier: "arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012",
 *     vectorSearchConfiguration: {
 *         vectorSearchDimension: 128,
 *     },
 *     tags: {
 *         Environment: "Development",
 *         ModifiedBy: "AWS",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_neptunegraph_graph` using the graph identifier. For example:
 *
 * ```sh
 * $ pulumi import aws:neptunegraph/graph:Graph example "graph_id"
 * ```
 */
class Graph extends pulumi.CustomResource {
    /**
     * Get an existing Graph resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Graph(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Graph.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Graph.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["graphName"] = state ? state.graphName : undefined;
            resourceInputs["graphNamePrefix"] = state ? state.graphNamePrefix : undefined;
            resourceInputs["kmsKeyIdentifier"] = state ? state.kmsKeyIdentifier : undefined;
            resourceInputs["provisionedMemory"] = state ? state.provisionedMemory : undefined;
            resourceInputs["publicConnectivity"] = state ? state.publicConnectivity : undefined;
            resourceInputs["replicaCount"] = state ? state.replicaCount : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vectorSearchConfiguration"] = state ? state.vectorSearchConfiguration : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.provisionedMemory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'provisionedMemory'");
            }
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["graphName"] = args ? args.graphName : undefined;
            resourceInputs["graphNamePrefix"] = args ? args.graphNamePrefix : undefined;
            resourceInputs["kmsKeyIdentifier"] = args ? args.kmsKeyIdentifier : undefined;
            resourceInputs["provisionedMemory"] = args ? args.provisionedMemory : undefined;
            resourceInputs["publicConnectivity"] = args ? args.publicConnectivity : undefined;
            resourceInputs["replicaCount"] = args ? args.replicaCount : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vectorSearchConfiguration"] = args ? args.vectorSearchConfiguration : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Graph.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Graph = Graph;
/** @internal */
Graph.__pulumiType = 'aws:neptunegraph/graph:Graph';
//# sourceMappingURL=graph.js.map