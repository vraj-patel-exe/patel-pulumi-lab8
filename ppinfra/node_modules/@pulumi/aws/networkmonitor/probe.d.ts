import * as pulumi from "@pulumi/pulumi";
/**
 * Resource for managing an AWS Network Monitor Probe.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.networkmonitor.Monitor("example", {
 *     aggregationPeriod: 30,
 *     monitorName: "example",
 * });
 * const exampleProbe = new aws.networkmonitor.Probe("example", {
 *     monitorName: example.monitorName,
 *     destination: "127.0.0.1",
 *     destinationPort: 80,
 *     protocol: "TCP",
 *     sourceArn: exampleAwsSubnet.arn,
 *     packetSize: 200,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_networkmonitor_probe` using the monitor name and probe id. For example:
 *
 * ```sh
 * $ pulumi import aws:networkmonitor/probe:Probe example monitor-7786087912324693644,probe-3qm8p693i4fi1h8lqylzkbp42e
 * ```
 */
export declare class Probe extends pulumi.CustomResource {
    /**
     * Get an existing Probe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProbeState, opts?: pulumi.CustomResourceOptions): Probe;
    /**
     * Returns true if the given object is an instance of Probe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Probe;
    readonly addressFamily: pulumi.Output<string>;
    /**
     * The ARN of the attachment.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The destination IP address. This must be either IPV4 or IPV6.
     */
    readonly destination: pulumi.Output<string>;
    /**
     * The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
     */
    readonly destinationPort: pulumi.Output<number | undefined>;
    /**
     * The name of the monitor.
     */
    readonly monitorName: pulumi.Output<string>;
    /**
     * The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
     *
     * The following arguments are optional:
     */
    readonly packetSize: pulumi.Output<number>;
    readonly probeId: pulumi.Output<string>;
    /**
     * The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
     */
    readonly protocol: pulumi.Output<string>;
    /**
     * The ARN of the subnet.
     */
    readonly sourceArn: pulumi.Output<string>;
    /**
     * Key-value tags for the monitor. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    readonly vpcId: pulumi.Output<string>;
    /**
     * Create a Probe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProbeArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Probe resources.
 */
export interface ProbeState {
    addressFamily?: pulumi.Input<string>;
    /**
     * The ARN of the attachment.
     */
    arn?: pulumi.Input<string>;
    /**
     * The destination IP address. This must be either IPV4 or IPV6.
     */
    destination?: pulumi.Input<string>;
    /**
     * The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
     */
    destinationPort?: pulumi.Input<number>;
    /**
     * The name of the monitor.
     */
    monitorName?: pulumi.Input<string>;
    /**
     * The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
     *
     * The following arguments are optional:
     */
    packetSize?: pulumi.Input<number>;
    probeId?: pulumi.Input<string>;
    /**
     * The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The ARN of the subnet.
     */
    sourceArn?: pulumi.Input<string>;
    /**
     * Key-value tags for the monitor. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    vpcId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Probe resource.
 */
export interface ProbeArgs {
    /**
     * The destination IP address. This must be either IPV4 or IPV6.
     */
    destination: pulumi.Input<string>;
    /**
     * The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
     */
    destinationPort?: pulumi.Input<number>;
    /**
     * The name of the monitor.
     */
    monitorName: pulumi.Input<string>;
    /**
     * The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
     *
     * The following arguments are optional:
     */
    packetSize?: pulumi.Input<number>;
    /**
     * The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
     */
    protocol: pulumi.Input<string>;
    /**
     * The ARN of the subnet.
     */
    sourceArn: pulumi.Input<string>;
    /**
     * Key-value tags for the monitor. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
