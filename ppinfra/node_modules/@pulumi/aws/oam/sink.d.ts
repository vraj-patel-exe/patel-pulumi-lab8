import * as pulumi from "@pulumi/pulumi";
/**
 * Resource for managing an AWS CloudWatch Observability Access Manager Sink.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.oam.Sink("example", {
 *     name: "ExampleSink",
 *     tags: {
 *         Env: "prod",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import CloudWatch Observability Access Manager Sink using the `arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:oam/sink:Sink example arn:aws:oam:us-west-2:123456789012:sink/sink-id
 * ```
 */
export declare class Sink extends pulumi.CustomResource {
    /**
     * Get an existing Sink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SinkState, opts?: pulumi.CustomResourceOptions): Sink;
    /**
     * Returns true if the given object is an instance of Sink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Sink;
    /**
     * ARN of the Sink.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Name for the sink.
     *
     * The following arguments are optional:
     */
    readonly name: pulumi.Output<string>;
    /**
     * ID string that AWS generated as part of the sink ARN.
     */
    readonly sinkId: pulumi.Output<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * @deprecated Please use `tags` instead.
     */
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * Create a Sink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SinkArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Sink resources.
 */
export interface SinkState {
    /**
     * ARN of the Sink.
     */
    arn?: pulumi.Input<string>;
    /**
     * Name for the sink.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * ID string that AWS generated as part of the sink ARN.
     */
    sinkId?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
/**
 * The set of arguments for constructing a Sink resource.
 */
export interface SinkArgs {
    /**
     * Name for the sink.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
