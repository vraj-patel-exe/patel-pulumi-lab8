"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Allows setting policy to an OpenSearch domain while referencing domain attributes (e.g., ARN).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.opensearch.Domain("example", {
 *     domainName: "tf-test",
 *     engineVersion: "OpenSearch_1.1",
 * });
 * const main = aws.iam.getPolicyDocumentOutput({
 *     statements: [{
 *         effect: "Allow",
 *         principals: [{
 *             type: "*",
 *             identifiers: ["*"],
 *         }],
 *         actions: ["es:*"],
 *         resources: [pulumi.interpolate`${example.arn}/*`],
 *         conditions: [{
 *             test: "IpAddress",
 *             variable: "aws:SourceIp",
 *             values: ["127.0.0.1/32"],
 *         }],
 *     }],
 * });
 * const mainDomainPolicy = new aws.opensearch.DomainPolicy("main", {
 *     domainName: example.domainName,
 *     accessPolicies: main.apply(main => main.json),
 * });
 * ```
 */
class DomainPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DomainPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DomainPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DomainPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainPolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessPolicies"] = state ? state.accessPolicies : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accessPolicies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessPolicies'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            resourceInputs["accessPolicies"] = args ? args.accessPolicies : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainPolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DomainPolicy = DomainPolicy;
/** @internal */
DomainPolicy.__pulumiType = 'aws:opensearch/domainPolicy:DomainPolicy';
//# sourceMappingURL=domainPolicy.js.map