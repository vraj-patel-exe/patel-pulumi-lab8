"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Package = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an AWS Opensearch Package.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as std from "@pulumi/std";
 *
 * const myOpensearchPackages = new aws.s3.BucketV2("my_opensearch_packages", {bucket: "my-opensearch-packages"});
 * const example = new aws.s3.BucketObjectv2("example", {
 *     bucket: myOpensearchPackages.bucket,
 *     key: "example.txt",
 *     source: new pulumi.asset.FileAsset("./example.txt"),
 *     etag: std.filemd5({
 *         input: "./example.txt",
 *     }).then(invoke => invoke.result),
 * });
 * const examplePackage = new aws.opensearch.Package("example", {
 *     packageName: "example-txt",
 *     packageSource: {
 *         s3BucketName: myOpensearchPackages.bucket,
 *         s3Key: example.key,
 *     },
 *     packageType: "TXT-DICTIONARY",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import AWS Opensearch Packages using the Package ID. For example:
 *
 * ```sh
 * $ pulumi import aws:opensearch/package:Package example package-id
 * ```
 */
class Package extends pulumi.CustomResource {
    /**
     * Get an existing Package resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Package(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Package.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Package.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["availablePackageVersion"] = state ? state.availablePackageVersion : undefined;
            resourceInputs["packageDescription"] = state ? state.packageDescription : undefined;
            resourceInputs["packageId"] = state ? state.packageId : undefined;
            resourceInputs["packageName"] = state ? state.packageName : undefined;
            resourceInputs["packageSource"] = state ? state.packageSource : undefined;
            resourceInputs["packageType"] = state ? state.packageType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.packageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageName'");
            }
            if ((!args || args.packageSource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageSource'");
            }
            if ((!args || args.packageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageType'");
            }
            resourceInputs["packageDescription"] = args ? args.packageDescription : undefined;
            resourceInputs["packageName"] = args ? args.packageName : undefined;
            resourceInputs["packageSource"] = args ? args.packageSource : undefined;
            resourceInputs["packageType"] = args ? args.packageType : undefined;
            resourceInputs["availablePackageVersion"] = undefined /*out*/;
            resourceInputs["packageId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Package.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Package = Package;
/** @internal */
Package.__pulumiType = 'aws:opensearch/package:Package';
//# sourceMappingURL=package.js.map