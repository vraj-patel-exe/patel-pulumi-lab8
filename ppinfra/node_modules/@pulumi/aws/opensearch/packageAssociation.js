"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageAssociation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an AWS Opensearch Package Association.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const myDomain = new aws.opensearch.Domain("my_domain", {
 *     domainName: "my-opensearch-domain",
 *     engineVersion: "Elasticsearch_7.10",
 *     clusterConfig: {
 *         instanceType: "r4.large.search",
 *     },
 * });
 * const example = new aws.opensearch.Package("example", {
 *     packageName: "example-txt",
 *     packageSource: {
 *         s3BucketName: myOpensearchPackages.bucket,
 *         s3Key: exampleAwsS3Object.key,
 *     },
 *     packageType: "TXT-DICTIONARY",
 * });
 * const examplePackageAssociation = new aws.opensearch.PackageAssociation("example", {
 *     packageId: example.id,
 *     domainName: myDomain.domainName,
 * });
 * ```
 */
class PackageAssociation extends pulumi.CustomResource {
    /**
     * Get an existing PackageAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PackageAssociation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PackageAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackageAssociation.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["packageId"] = state ? state.packageId : undefined;
            resourceInputs["referencePath"] = state ? state.referencePath : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.packageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageId'");
            }
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["packageId"] = args ? args.packageId : undefined;
            resourceInputs["referencePath"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PackageAssociation.__pulumiType, name, resourceInputs, opts);
    }
}
exports.PackageAssociation = PackageAssociation;
/** @internal */
PackageAssociation.__pulumiType = 'aws:opensearch/packageAssociation:PackageAssociation';
//# sourceMappingURL=packageAssociation.js.map