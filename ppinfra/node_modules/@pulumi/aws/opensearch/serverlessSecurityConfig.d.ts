import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Resource for managing an AWS OpenSearch Serverless Security Config.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Using `pulumi import`, import OpenSearchServerless Access Policy using the `name` argument prefixed with the string `saml/account_id/`. For example:
 *
 * ```sh
 * $ pulumi import aws:opensearch/serverlessSecurityConfig:ServerlessSecurityConfig example saml/123456789012/example
 * ```
 */
export declare class ServerlessSecurityConfig extends pulumi.CustomResource {
    /**
     * Get an existing ServerlessSecurityConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerlessSecurityConfigState, opts?: pulumi.CustomResourceOptions): ServerlessSecurityConfig;
    /**
     * Returns true if the given object is an instance of ServerlessSecurityConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ServerlessSecurityConfig;
    /**
     * Version of the configuration.
     */
    readonly configVersion: pulumi.Output<string>;
    /**
     * Description of the security configuration.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Name of the policy.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Configuration block for SAML options.
     */
    readonly samlOptions: pulumi.Output<outputs.opensearch.ServerlessSecurityConfigSamlOptions | undefined>;
    /**
     * Type of configuration. Must be `saml`.
     *
     * The following arguments are optional:
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a ServerlessSecurityConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerlessSecurityConfigArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ServerlessSecurityConfig resources.
 */
export interface ServerlessSecurityConfigState {
    /**
     * Version of the configuration.
     */
    configVersion?: pulumi.Input<string>;
    /**
     * Description of the security configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration block for SAML options.
     */
    samlOptions?: pulumi.Input<inputs.opensearch.ServerlessSecurityConfigSamlOptions>;
    /**
     * Type of configuration. Must be `saml`.
     *
     * The following arguments are optional:
     */
    type?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ServerlessSecurityConfig resource.
 */
export interface ServerlessSecurityConfigArgs {
    /**
     * Description of the security configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration block for SAML options.
     */
    samlOptions?: pulumi.Input<inputs.opensearch.ServerlessSecurityConfigSamlOptions>;
    /**
     * Type of configuration. Must be `saml`.
     *
     * The following arguments are optional:
     */
    type: pulumi.Input<string>;
}
