"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourcePolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource to manage a resource-based delegation policy that can be used to delegate policy management for AWS Organizations to specified member accounts to perform policy actions that are by default available only to the management account. See the [_AWS Organizations User Guide_](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_delegate_policies.html) for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.organizations.ResourcePolicy("example", {content: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Sid": "DelegatingNecessaryDescribeListActions",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "AWS": "arn:aws:iam::123456789012:root"
 *       },
 *       "Action": [
 *         "organizations:DescribeOrganization",
 *         "organizations:DescribeOrganizationalUnit",
 *         "organizations:DescribeAccount",
 *         "organizations:DescribePolicy",
 *         "organizations:DescribeEffectivePolicy",
 *         "organizations:ListRoots",
 *         "organizations:ListOrganizationalUnitsForParent",
 *         "organizations:ListParents",
 *         "organizations:ListChildren",
 *         "organizations:ListAccounts",
 *         "organizations:ListAccountsForParent",
 *         "organizations:ListPolicies",
 *         "organizations:ListPoliciesForTarget",
 *         "organizations:ListTargetsForPolicy",
 *         "organizations:ListTagsForResource"
 *       ],
 *       "Resource": "*"
 *     }
 *   ]
 * }
 * `});
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_organizations_resource_policy` using the resource policy ID. For example:
 *
 * ```sh
 * $ pulumi import aws:organizations/resourcePolicy:ResourcePolicy example rp-12345678
 * ```
 */
class ResourcePolicy extends pulumi.CustomResource {
    /**
     * Get an existing ResourcePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ResourcePolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ResourcePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourcePolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourcePolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ResourcePolicy = ResourcePolicy;
/** @internal */
ResourcePolicy.__pulumiType = 'aws:organizations/resourcePolicy:ResourcePolicy';
//# sourceMappingURL=resourcePolicy.js.map