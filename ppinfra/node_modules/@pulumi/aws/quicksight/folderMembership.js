"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FolderMembership = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS QuickSight Folder Membership.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.quicksight.FolderMembership("example", {
 *     folderId: exampleAwsQuicksightFolder.folderId,
 *     memberType: "DATASET",
 *     memberId: exampleAwsQuicksightDataSet.dataSetId,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import QuickSight Folder Membership using the AWS account ID, folder ID, member type, and member ID separated by commas (`,`). For example:
 *
 * ```sh
 * $ pulumi import aws:quicksight/folderMembership:FolderMembership example 123456789012,example-folder,DATASET,example-dataset
 * ```
 */
class FolderMembership extends pulumi.CustomResource {
    /**
     * Get an existing FolderMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FolderMembership(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FolderMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FolderMembership.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["awsAccountId"] = state ? state.awsAccountId : undefined;
            resourceInputs["folderId"] = state ? state.folderId : undefined;
            resourceInputs["memberId"] = state ? state.memberId : undefined;
            resourceInputs["memberType"] = state ? state.memberType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.folderId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'folderId'");
            }
            if ((!args || args.memberId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memberId'");
            }
            if ((!args || args.memberType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memberType'");
            }
            resourceInputs["awsAccountId"] = args ? args.awsAccountId : undefined;
            resourceInputs["folderId"] = args ? args.folderId : undefined;
            resourceInputs["memberId"] = args ? args.memberId : undefined;
            resourceInputs["memberType"] = args ? args.memberType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FolderMembership.__pulumiType, name, resourceInputs, opts);
    }
}
exports.FolderMembership = FolderMembership;
/** @internal */
FolderMembership.__pulumiType = 'aws:quicksight/folderMembership:FolderMembership';
//# sourceMappingURL=folderMembership.js.map