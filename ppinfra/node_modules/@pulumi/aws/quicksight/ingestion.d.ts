import * as pulumi from "@pulumi/pulumi";
/**
 * Resource for managing an AWS QuickSight Ingestion.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.quicksight.Ingestion("example", {
 *     dataSetId: exampleAwsQuicksightDataSet.dataSetId,
 *     ingestionId: "example-id",
 *     ingestionType: "FULL_REFRESH",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import QuickSight Ingestion using the AWS account ID, data set ID, and ingestion ID separated by commas (`,`). For example:
 *
 * ```sh
 * $ pulumi import aws:quicksight/ingestion:Ingestion example 123456789012,example-dataset-id,example-ingestion-id
 * ```
 */
export declare class Ingestion extends pulumi.CustomResource {
    /**
     * Get an existing Ingestion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IngestionState, opts?: pulumi.CustomResourceOptions): Ingestion;
    /**
     * Returns true if the given object is an instance of Ingestion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Ingestion;
    /**
     * ARN of the Ingestion.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * AWS account ID.
     */
    readonly awsAccountId: pulumi.Output<string>;
    /**
     * ID of the dataset used in the ingestion.
     */
    readonly dataSetId: pulumi.Output<string>;
    /**
     * ID for the ingestion.
     */
    readonly ingestionId: pulumi.Output<string>;
    /**
     * Ingestion status.
     */
    readonly ingestionStatus: pulumi.Output<string>;
    /**
     * Type of ingestion to be created. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
     *
     * The following arguments are optional:
     */
    readonly ingestionType: pulumi.Output<string>;
    /**
     * Create a Ingestion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IngestionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Ingestion resources.
 */
export interface IngestionState {
    /**
     * ARN of the Ingestion.
     */
    arn?: pulumi.Input<string>;
    /**
     * AWS account ID.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * ID of the dataset used in the ingestion.
     */
    dataSetId?: pulumi.Input<string>;
    /**
     * ID for the ingestion.
     */
    ingestionId?: pulumi.Input<string>;
    /**
     * Ingestion status.
     */
    ingestionStatus?: pulumi.Input<string>;
    /**
     * Type of ingestion to be created. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
     *
     * The following arguments are optional:
     */
    ingestionType?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Ingestion resource.
 */
export interface IngestionArgs {
    /**
     * AWS account ID.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * ID of the dataset used in the ingestion.
     */
    dataSetId: pulumi.Input<string>;
    /**
     * ID for the ingestion.
     */
    ingestionId: pulumi.Input<string>;
    /**
     * Type of ingestion to be created. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
     *
     * The following arguments are optional:
     */
    ingestionType: pulumi.Input<string>;
}
