import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Resource for managing a QuickSight Theme.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.quicksight.Theme("example", {
 *     themeId: "example",
 *     name: "example",
 *     baseThemeId: "MIDNIGHT",
 *     configuration: {
 *         dataColorPalette: {
 *             colors: [
 *                 "#FFFFFF",
 *                 "#111111",
 *                 "#222222",
 *                 "#333333",
 *                 "#444444",
 *                 "#555555",
 *                 "#666666",
 *                 "#777777",
 *                 "#888888",
 *                 "#999999",
 *             ],
 *             emptyFillColor: "#FFFFFF",
 *             minMaxGradients: [
 *                 "#FFFFFF",
 *                 "#111111",
 *             ],
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import a QuickSight Theme using the AWS account ID and theme ID separated by a comma (`,`). For example:
 *
 * ```sh
 * $ pulumi import aws:quicksight/theme:Theme example 123456789012,example-id
 * ```
 */
export declare class Theme extends pulumi.CustomResource {
    /**
     * Get an existing Theme resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThemeState, opts?: pulumi.CustomResourceOptions): Theme;
    /**
     * Returns true if the given object is an instance of Theme.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Theme;
    /**
     * ARN of the theme.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * AWS account ID.
     */
    readonly awsAccountId: pulumi.Output<string>;
    /**
     * The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use ListThemes or choose Themes from within an analysis.
     */
    readonly baseThemeId: pulumi.Output<string>;
    /**
     * The theme configuration, which contains the theme display properties. See configuration.
     *
     * The following arguments are optional:
     */
    readonly configuration: pulumi.Output<outputs.quicksight.ThemeConfiguration | undefined>;
    /**
     * The time that the theme was created.
     */
    readonly createdTime: pulumi.Output<string>;
    /**
     * The time that the theme was last updated.
     */
    readonly lastUpdatedTime: pulumi.Output<string>;
    /**
     * Display name of the theme.
     */
    readonly name: pulumi.Output<string>;
    /**
     * A set of resource permissions on the theme. Maximum of 64 items. See permissions.
     */
    readonly permissions: pulumi.Output<outputs.quicksight.ThemePermission[] | undefined>;
    /**
     * The theme creation status.
     */
    readonly status: pulumi.Output<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * Identifier of the theme.
     */
    readonly themeId: pulumi.Output<string>;
    /**
     * A description of the current theme version being created/updated.
     */
    readonly versionDescription: pulumi.Output<string | undefined>;
    /**
     * The version number of the theme version.
     */
    readonly versionNumber: pulumi.Output<number>;
    /**
     * Create a Theme resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThemeArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Theme resources.
 */
export interface ThemeState {
    /**
     * ARN of the theme.
     */
    arn?: pulumi.Input<string>;
    /**
     * AWS account ID.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use ListThemes or choose Themes from within an analysis.
     */
    baseThemeId?: pulumi.Input<string>;
    /**
     * The theme configuration, which contains the theme display properties. See configuration.
     *
     * The following arguments are optional:
     */
    configuration?: pulumi.Input<inputs.quicksight.ThemeConfiguration>;
    /**
     * The time that the theme was created.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * The time that the theme was last updated.
     */
    lastUpdatedTime?: pulumi.Input<string>;
    /**
     * Display name of the theme.
     */
    name?: pulumi.Input<string>;
    /**
     * A set of resource permissions on the theme. Maximum of 64 items. See permissions.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.quicksight.ThemePermission>[]>;
    /**
     * The theme creation status.
     */
    status?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Identifier of the theme.
     */
    themeId?: pulumi.Input<string>;
    /**
     * A description of the current theme version being created/updated.
     */
    versionDescription?: pulumi.Input<string>;
    /**
     * The version number of the theme version.
     */
    versionNumber?: pulumi.Input<number>;
}
/**
 * The set of arguments for constructing a Theme resource.
 */
export interface ThemeArgs {
    /**
     * AWS account ID.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use ListThemes or choose Themes from within an analysis.
     */
    baseThemeId: pulumi.Input<string>;
    /**
     * The theme configuration, which contains the theme display properties. See configuration.
     *
     * The following arguments are optional:
     */
    configuration?: pulumi.Input<inputs.quicksight.ThemeConfiguration>;
    /**
     * Display name of the theme.
     */
    name?: pulumi.Input<string>;
    /**
     * A set of resource permissions on the theme. Maximum of 64 items. See permissions.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.quicksight.ThemePermission>[]>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Identifier of the theme.
     */
    themeId: pulumi.Input<string>;
    /**
     * A description of the current theme version being created/updated.
     */
    versionDescription?: pulumi.Input<string>;
}
