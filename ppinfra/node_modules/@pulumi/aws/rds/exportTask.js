"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportTask = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS RDS (Relational Database) Export Task.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.rds.ExportTask("example", {
 *     exportTaskIdentifier: "example",
 *     sourceArn: exampleAwsDbSnapshot.dbSnapshotArn,
 *     s3BucketName: exampleAwsS3Bucket.id,
 *     iamRoleArn: exampleAwsIamRole.arn,
 *     kmsKeyId: exampleAwsKmsKey.arn,
 * });
 * ```
 *
 * ### Complete Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleBucketV2 = new aws.s3.BucketV2("example", {
 *     bucket: "example",
 *     forceDestroy: true,
 * });
 * const exampleBucketAclV2 = new aws.s3.BucketAclV2("example", {
 *     bucket: exampleBucketV2.id,
 *     acl: "private",
 * });
 * const exampleRole = new aws.iam.Role("example", {
 *     name: "example",
 *     assumeRolePolicy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Action: "sts:AssumeRole",
 *             Effect: "Allow",
 *             Sid: "",
 *             Principal: {
 *                 Service: "export.rds.amazonaws.com",
 *             },
 *         }],
 *     }),
 * });
 * const example = aws.iam.getPolicyDocumentOutput({
 *     statements: [
 *         {
 *             actions: ["s3:ListAllMyBuckets"],
 *             resources: ["*"],
 *         },
 *         {
 *             actions: [
 *                 "s3:GetBucketLocation",
 *                 "s3:ListBucket",
 *             ],
 *             resources: [exampleBucketV2.arn],
 *         },
 *         {
 *             actions: [
 *                 "s3:GetObject",
 *                 "s3:PutObject",
 *                 "s3:DeleteObject",
 *             ],
 *             resources: [pulumi.interpolate`${exampleBucketV2.arn}/*`],
 *         },
 *     ],
 * });
 * const examplePolicy = new aws.iam.Policy("example", {
 *     name: "example",
 *     policy: example.apply(example => example.json),
 * });
 * const exampleRolePolicyAttachment = new aws.iam.RolePolicyAttachment("example", {
 *     role: exampleRole.name,
 *     policyArn: examplePolicy.arn,
 * });
 * const exampleKey = new aws.kms.Key("example", {deletionWindowInDays: 10});
 * const exampleInstance = new aws.rds.Instance("example", {
 *     identifier: "example",
 *     allocatedStorage: 10,
 *     dbName: "test",
 *     engine: "mysql",
 *     engineVersion: "5.7",
 *     instanceClass: aws.rds.InstanceType.T3_Micro,
 *     username: "foo",
 *     password: "foobarbaz",
 *     parameterGroupName: "default.mysql5.7",
 *     skipFinalSnapshot: true,
 * });
 * const exampleSnapshot = new aws.rds.Snapshot("example", {
 *     dbInstanceIdentifier: exampleInstance.identifier,
 *     dbSnapshotIdentifier: "example",
 * });
 * const exampleExportTask = new aws.rds.ExportTask("example", {
 *     exportTaskIdentifier: "example",
 *     sourceArn: exampleSnapshot.dbSnapshotArn,
 *     s3BucketName: exampleBucketV2.id,
 *     iamRoleArn: exampleRole.arn,
 *     kmsKeyId: exampleKey.arn,
 *     exportOnlies: ["database"],
 *     s3Prefix: "my_prefix/example",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import a RDS (Relational Database) Export Task using the `export_task_identifier`. For example:
 *
 * ```sh
 * $ pulumi import aws:rds/exportTask:ExportTask example example
 * ```
 */
class ExportTask extends pulumi.CustomResource {
    /**
     * Get an existing ExportTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ExportTask(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ExportTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExportTask.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["exportOnlies"] = state ? state.exportOnlies : undefined;
            resourceInputs["exportTaskIdentifier"] = state ? state.exportTaskIdentifier : undefined;
            resourceInputs["failureCause"] = state ? state.failureCause : undefined;
            resourceInputs["iamRoleArn"] = state ? state.iamRoleArn : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["percentProgress"] = state ? state.percentProgress : undefined;
            resourceInputs["s3BucketName"] = state ? state.s3BucketName : undefined;
            resourceInputs["s3Prefix"] = state ? state.s3Prefix : undefined;
            resourceInputs["snapshotTime"] = state ? state.snapshotTime : undefined;
            resourceInputs["sourceArn"] = state ? state.sourceArn : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["taskEndTime"] = state ? state.taskEndTime : undefined;
            resourceInputs["taskStartTime"] = state ? state.taskStartTime : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["warningMessage"] = state ? state.warningMessage : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.exportTaskIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exportTaskIdentifier'");
            }
            if ((!args || args.iamRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iamRoleArn'");
            }
            if ((!args || args.kmsKeyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kmsKeyId'");
            }
            if ((!args || args.s3BucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 's3BucketName'");
            }
            if ((!args || args.sourceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceArn'");
            }
            resourceInputs["exportOnlies"] = args ? args.exportOnlies : undefined;
            resourceInputs["exportTaskIdentifier"] = args ? args.exportTaskIdentifier : undefined;
            resourceInputs["iamRoleArn"] = args ? args.iamRoleArn : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["s3BucketName"] = args ? args.s3BucketName : undefined;
            resourceInputs["s3Prefix"] = args ? args.s3Prefix : undefined;
            resourceInputs["sourceArn"] = args ? args.sourceArn : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["failureCause"] = undefined /*out*/;
            resourceInputs["percentProgress"] = undefined /*out*/;
            resourceInputs["snapshotTime"] = undefined /*out*/;
            resourceInputs["sourceType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["taskEndTime"] = undefined /*out*/;
            resourceInputs["taskStartTime"] = undefined /*out*/;
            resourceInputs["warningMessage"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExportTask.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ExportTask = ExportTask;
/** @internal */
ExportTask.__pulumiType = 'aws:rds/exportTask:ExportTask';
//# sourceMappingURL=exportTask.js.map