"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Proxy = exports.ParameterGroup = exports.OptionGroup = exports.Integration = exports.InstanceDesiredState = exports.InstanceAutomatedBackupsReplication = exports.Instance = exports.GlobalCluster = exports.getSubnetGroupOutput = exports.getSubnetGroup = exports.getSnapshotOutput = exports.getSnapshot = exports.getReservedInstanceOfferingOutput = exports.getReservedInstanceOffering = exports.getProxyOutput = exports.getProxy = exports.getParameterGroupOutput = exports.getParameterGroup = exports.getOrderableDbInstanceOutput = exports.getOrderableDbInstance = exports.getInstancesOutput = exports.getInstances = exports.getInstanceOutput = exports.getInstance = exports.getEventCategoriesOutput = exports.getEventCategories = exports.getEngineVersionOutput = exports.getEngineVersion = exports.getClustersOutput = exports.getClusters = exports.getClusterSnapshotOutput = exports.getClusterSnapshot = exports.getClusterParameterGroupOutput = exports.getClusterParameterGroup = exports.getClusterOutput = exports.getCluster = exports.getCertificateOutput = exports.getCertificate = exports.ExportTask = exports.EventSubscription = exports.CustomDbEngineVersion = exports.ClusterSnapshotCopy = exports.ClusterSnapshot = exports.ClusterRoleAssociation = exports.ClusterParameterGroup = exports.ClusterInstance = exports.ClusterEndpoint = exports.ClusterActivityStream = exports.Cluster = exports.Certificate = void 0;
exports.SubnetGroup = exports.SnapshotCopy = exports.Snapshot = exports.ShardGroup = exports.RoleAssociation = exports.ReservedInstance = exports.ProxyTarget = exports.ProxyEndpoint = exports.ProxyDefaultTargetGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Certificate = null;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));
exports.Cluster = null;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));
exports.ClusterActivityStream = null;
utilities.lazyLoad(exports, ["ClusterActivityStream"], () => require("./clusterActivityStream"));
exports.ClusterEndpoint = null;
utilities.lazyLoad(exports, ["ClusterEndpoint"], () => require("./clusterEndpoint"));
exports.ClusterInstance = null;
utilities.lazyLoad(exports, ["ClusterInstance"], () => require("./clusterInstance"));
exports.ClusterParameterGroup = null;
utilities.lazyLoad(exports, ["ClusterParameterGroup"], () => require("./clusterParameterGroup"));
exports.ClusterRoleAssociation = null;
utilities.lazyLoad(exports, ["ClusterRoleAssociation"], () => require("./clusterRoleAssociation"));
exports.ClusterSnapshot = null;
utilities.lazyLoad(exports, ["ClusterSnapshot"], () => require("./clusterSnapshot"));
exports.ClusterSnapshotCopy = null;
utilities.lazyLoad(exports, ["ClusterSnapshotCopy"], () => require("./clusterSnapshotCopy"));
exports.CustomDbEngineVersion = null;
utilities.lazyLoad(exports, ["CustomDbEngineVersion"], () => require("./customDbEngineVersion"));
__exportStar(require("./engineMode"), exports);
__exportStar(require("./engineType"), exports);
exports.EventSubscription = null;
utilities.lazyLoad(exports, ["EventSubscription"], () => require("./eventSubscription"));
exports.ExportTask = null;
utilities.lazyLoad(exports, ["ExportTask"], () => require("./exportTask"));
exports.getCertificate = null;
exports.getCertificateOutput = null;
utilities.lazyLoad(exports, ["getCertificate", "getCertificateOutput"], () => require("./getCertificate"));
exports.getCluster = null;
exports.getClusterOutput = null;
utilities.lazyLoad(exports, ["getCluster", "getClusterOutput"], () => require("./getCluster"));
exports.getClusterParameterGroup = null;
exports.getClusterParameterGroupOutput = null;
utilities.lazyLoad(exports, ["getClusterParameterGroup", "getClusterParameterGroupOutput"], () => require("./getClusterParameterGroup"));
exports.getClusterSnapshot = null;
exports.getClusterSnapshotOutput = null;
utilities.lazyLoad(exports, ["getClusterSnapshot", "getClusterSnapshotOutput"], () => require("./getClusterSnapshot"));
exports.getClusters = null;
exports.getClustersOutput = null;
utilities.lazyLoad(exports, ["getClusters", "getClustersOutput"], () => require("./getClusters"));
exports.getEngineVersion = null;
exports.getEngineVersionOutput = null;
utilities.lazyLoad(exports, ["getEngineVersion", "getEngineVersionOutput"], () => require("./getEngineVersion"));
exports.getEventCategories = null;
exports.getEventCategoriesOutput = null;
utilities.lazyLoad(exports, ["getEventCategories", "getEventCategoriesOutput"], () => require("./getEventCategories"));
exports.getInstance = null;
exports.getInstanceOutput = null;
utilities.lazyLoad(exports, ["getInstance", "getInstanceOutput"], () => require("./getInstance"));
exports.getInstances = null;
exports.getInstancesOutput = null;
utilities.lazyLoad(exports, ["getInstances", "getInstancesOutput"], () => require("./getInstances"));
exports.getOrderableDbInstance = null;
exports.getOrderableDbInstanceOutput = null;
utilities.lazyLoad(exports, ["getOrderableDbInstance", "getOrderableDbInstanceOutput"], () => require("./getOrderableDbInstance"));
exports.getParameterGroup = null;
exports.getParameterGroupOutput = null;
utilities.lazyLoad(exports, ["getParameterGroup", "getParameterGroupOutput"], () => require("./getParameterGroup"));
exports.getProxy = null;
exports.getProxyOutput = null;
utilities.lazyLoad(exports, ["getProxy", "getProxyOutput"], () => require("./getProxy"));
exports.getReservedInstanceOffering = null;
exports.getReservedInstanceOfferingOutput = null;
utilities.lazyLoad(exports, ["getReservedInstanceOffering", "getReservedInstanceOfferingOutput"], () => require("./getReservedInstanceOffering"));
exports.getSnapshot = null;
exports.getSnapshotOutput = null;
utilities.lazyLoad(exports, ["getSnapshot", "getSnapshotOutput"], () => require("./getSnapshot"));
exports.getSubnetGroup = null;
exports.getSubnetGroupOutput = null;
utilities.lazyLoad(exports, ["getSubnetGroup", "getSubnetGroupOutput"], () => require("./getSubnetGroup"));
exports.GlobalCluster = null;
utilities.lazyLoad(exports, ["GlobalCluster"], () => require("./globalCluster"));
exports.Instance = null;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));
exports.InstanceAutomatedBackupsReplication = null;
utilities.lazyLoad(exports, ["InstanceAutomatedBackupsReplication"], () => require("./instanceAutomatedBackupsReplication"));
exports.InstanceDesiredState = null;
utilities.lazyLoad(exports, ["InstanceDesiredState"], () => require("./instanceDesiredState"));
__exportStar(require("./instanceType"), exports);
exports.Integration = null;
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));
exports.OptionGroup = null;
utilities.lazyLoad(exports, ["OptionGroup"], () => require("./optionGroup"));
exports.ParameterGroup = null;
utilities.lazyLoad(exports, ["ParameterGroup"], () => require("./parameterGroup"));
exports.Proxy = null;
utilities.lazyLoad(exports, ["Proxy"], () => require("./proxy"));
exports.ProxyDefaultTargetGroup = null;
utilities.lazyLoad(exports, ["ProxyDefaultTargetGroup"], () => require("./proxyDefaultTargetGroup"));
exports.ProxyEndpoint = null;
utilities.lazyLoad(exports, ["ProxyEndpoint"], () => require("./proxyEndpoint"));
exports.ProxyTarget = null;
utilities.lazyLoad(exports, ["ProxyTarget"], () => require("./proxyTarget"));
exports.ReservedInstance = null;
utilities.lazyLoad(exports, ["ReservedInstance"], () => require("./reservedInstance"));
exports.RoleAssociation = null;
utilities.lazyLoad(exports, ["RoleAssociation"], () => require("./roleAssociation"));
exports.ShardGroup = null;
utilities.lazyLoad(exports, ["ShardGroup"], () => require("./shardGroup"));
exports.Snapshot = null;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));
exports.SnapshotCopy = null;
utilities.lazyLoad(exports, ["SnapshotCopy"], () => require("./snapshotCopy"));
__exportStar(require("./storageType"), exports);
exports.SubnetGroup = null;
utilities.lazyLoad(exports, ["SubnetGroup"], () => require("./subnetGroup"));
// Export enums:
__exportStar(require("../types/enums/rds"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:rds/certificate:Certificate":
                return new exports.Certificate(name, undefined, { urn });
            case "aws:rds/cluster:Cluster":
                return new exports.Cluster(name, undefined, { urn });
            case "aws:rds/clusterActivityStream:ClusterActivityStream":
                return new exports.ClusterActivityStream(name, undefined, { urn });
            case "aws:rds/clusterEndpoint:ClusterEndpoint":
                return new exports.ClusterEndpoint(name, undefined, { urn });
            case "aws:rds/clusterInstance:ClusterInstance":
                return new exports.ClusterInstance(name, undefined, { urn });
            case "aws:rds/clusterParameterGroup:ClusterParameterGroup":
                return new exports.ClusterParameterGroup(name, undefined, { urn });
            case "aws:rds/clusterRoleAssociation:ClusterRoleAssociation":
                return new exports.ClusterRoleAssociation(name, undefined, { urn });
            case "aws:rds/clusterSnapshot:ClusterSnapshot":
                return new exports.ClusterSnapshot(name, undefined, { urn });
            case "aws:rds/clusterSnapshotCopy:ClusterSnapshotCopy":
                return new exports.ClusterSnapshotCopy(name, undefined, { urn });
            case "aws:rds/customDbEngineVersion:CustomDbEngineVersion":
                return new exports.CustomDbEngineVersion(name, undefined, { urn });
            case "aws:rds/eventSubscription:EventSubscription":
                return new exports.EventSubscription(name, undefined, { urn });
            case "aws:rds/exportTask:ExportTask":
                return new exports.ExportTask(name, undefined, { urn });
            case "aws:rds/globalCluster:GlobalCluster":
                return new exports.GlobalCluster(name, undefined, { urn });
            case "aws:rds/instance:Instance":
                return new exports.Instance(name, undefined, { urn });
            case "aws:rds/instanceAutomatedBackupsReplication:InstanceAutomatedBackupsReplication":
                return new exports.InstanceAutomatedBackupsReplication(name, undefined, { urn });
            case "aws:rds/instanceDesiredState:InstanceDesiredState":
                return new exports.InstanceDesiredState(name, undefined, { urn });
            case "aws:rds/integration:Integration":
                return new exports.Integration(name, undefined, { urn });
            case "aws:rds/optionGroup:OptionGroup":
                return new exports.OptionGroup(name, undefined, { urn });
            case "aws:rds/parameterGroup:ParameterGroup":
                return new exports.ParameterGroup(name, undefined, { urn });
            case "aws:rds/proxy:Proxy":
                return new exports.Proxy(name, undefined, { urn });
            case "aws:rds/proxyDefaultTargetGroup:ProxyDefaultTargetGroup":
                return new exports.ProxyDefaultTargetGroup(name, undefined, { urn });
            case "aws:rds/proxyEndpoint:ProxyEndpoint":
                return new exports.ProxyEndpoint(name, undefined, { urn });
            case "aws:rds/proxyTarget:ProxyTarget":
                return new exports.ProxyTarget(name, undefined, { urn });
            case "aws:rds/reservedInstance:ReservedInstance":
                return new exports.ReservedInstance(name, undefined, { urn });
            case "aws:rds/roleAssociation:RoleAssociation":
                return new exports.RoleAssociation(name, undefined, { urn });
            case "aws:rds/shardGroup:ShardGroup":
                return new exports.ShardGroup(name, undefined, { urn });
            case "aws:rds/snapshot:Snapshot":
                return new exports.Snapshot(name, undefined, { urn });
            case "aws:rds/snapshotCopy:SnapshotCopy":
                return new exports.SnapshotCopy(name, undefined, { urn });
            case "aws:rds/subnetGroup:SubnetGroup":
                return new exports.SubnetGroup(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "rds/certificate", _module);
pulumi.runtime.registerResourceModule("aws", "rds/cluster", _module);
pulumi.runtime.registerResourceModule("aws", "rds/clusterActivityStream", _module);
pulumi.runtime.registerResourceModule("aws", "rds/clusterEndpoint", _module);
pulumi.runtime.registerResourceModule("aws", "rds/clusterInstance", _module);
pulumi.runtime.registerResourceModule("aws", "rds/clusterParameterGroup", _module);
pulumi.runtime.registerResourceModule("aws", "rds/clusterRoleAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "rds/clusterSnapshot", _module);
pulumi.runtime.registerResourceModule("aws", "rds/clusterSnapshotCopy", _module);
pulumi.runtime.registerResourceModule("aws", "rds/customDbEngineVersion", _module);
pulumi.runtime.registerResourceModule("aws", "rds/eventSubscription", _module);
pulumi.runtime.registerResourceModule("aws", "rds/exportTask", _module);
pulumi.runtime.registerResourceModule("aws", "rds/globalCluster", _module);
pulumi.runtime.registerResourceModule("aws", "rds/instance", _module);
pulumi.runtime.registerResourceModule("aws", "rds/instanceAutomatedBackupsReplication", _module);
pulumi.runtime.registerResourceModule("aws", "rds/instanceDesiredState", _module);
pulumi.runtime.registerResourceModule("aws", "rds/integration", _module);
pulumi.runtime.registerResourceModule("aws", "rds/optionGroup", _module);
pulumi.runtime.registerResourceModule("aws", "rds/parameterGroup", _module);
pulumi.runtime.registerResourceModule("aws", "rds/proxy", _module);
pulumi.runtime.registerResourceModule("aws", "rds/proxyDefaultTargetGroup", _module);
pulumi.runtime.registerResourceModule("aws", "rds/proxyEndpoint", _module);
pulumi.runtime.registerResourceModule("aws", "rds/proxyTarget", _module);
pulumi.runtime.registerResourceModule("aws", "rds/reservedInstance", _module);
pulumi.runtime.registerResourceModule("aws", "rds/roleAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "rds/shardGroup", _module);
pulumi.runtime.registerResourceModule("aws", "rds/snapshot", _module);
pulumi.runtime.registerResourceModule("aws", "rds/snapshotCopy", _module);
pulumi.runtime.registerResourceModule("aws", "rds/subnetGroup", _module);
//# sourceMappingURL=index.js.map