"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an RDS instance resource.  A DB instance is an isolated database
 * environment in the cloud.  A DB instance can contain multiple user-created
 * databases.
 *
 * Changes to a DB instance can occur when you manually change a parameter, such as
 * `allocatedStorage`, and are reflected in the next maintenance window. Because
 * of this, this provider may report a difference in its planning phase because a
 * modification has not yet taken place. You can use the `applyImmediately` flag
 * to instruct the service to apply the change immediately (see documentation
 * below).
 *
 * When upgrading the major version of an engine, `allowMajorVersionUpgrade` must be set to `true`.
 *
 * > **Note:** using `applyImmediately` can result in a brief downtime as the server reboots.
 * See the AWS Docs on [RDS Instance Maintenance][instance-maintenance] for more information.
 *
 * > **Note:** All arguments including the username and password will be stored in the raw state as plain-text.
 * Read more about sensitive data instate.
 *
 * ## RDS Instance Class Types
 *
 * Amazon RDS supports instance classes for the following use cases: General-purpose, Memory-optimized, Burstable Performance, and Optimized-reads.
 * For more information please read the AWS RDS documentation about [DB Instance Class Types](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html)
 *
 * ## Low-Downtime Updates
 *
 * By default, RDS applies updates to DB Instances in-place, which can lead to service interruptions.
 * Low-downtime updates minimize service interruptions by performing the updates with an [RDS Blue/Green deployment][blue-green] and switching over the instances when complete.
 *
 * Low-downtime updates are only available for DB Instances using MySQL, MariaDB and PostgreSQL,
 * as other engines are not supported by RDS Blue/Green deployments.
 * They cannot be used with DB Instances with replicas.
 *
 * Backups must be enabled to use low-downtime updates.
 *
 * Enable low-downtime updates by setting `blue_green_update.enabled` to `true`.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const _default = new aws.rds.Instance("default", {
 *     allocatedStorage: 10,
 *     dbName: "mydb",
 *     engine: "mysql",
 *     engineVersion: "8.0",
 *     instanceClass: aws.rds.InstanceType.T3_Micro,
 *     username: "foo",
 *     password: "foobarbaz",
 *     parameterGroupName: "default.mysql8.0",
 *     skipFinalSnapshot: true,
 * });
 * ```
 *
 * ### RDS Custom for Oracle Usage with Replica
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // Lookup the available instance classes for the custom engine for the region being operated in
 * const custom_oracle = aws.rds.getOrderableDbInstance({
 *     engine: "custom-oracle-ee",
 *     engineVersion: "19.c.ee.002",
 *     licenseModel: "bring-your-own-license",
 *     storageType: "gp3",
 *     preferredInstanceClasses: [
 *         "db.r5.xlarge",
 *         "db.r5.2xlarge",
 *         "db.r5.4xlarge",
 *     ],
 * });
 * // The RDS instance resource requires an ARN. Look up the ARN of the KMS key associated with the CEV.
 * const byId = aws.kms.getKey({
 *     keyId: "example-ef278353ceba4a5a97de6784565b9f78",
 * });
 * const _default = new aws.rds.Instance("default", {
 *     allocatedStorage: 50,
 *     autoMinorVersionUpgrade: false,
 *     customIamInstanceProfile: "AWSRDSCustomInstanceProfile",
 *     backupRetentionPeriod: 7,
 *     dbSubnetGroupName: dbSubnetGroupName,
 *     engine: custom_oracle.then(custom_oracle => custom_oracle.engine),
 *     engineVersion: custom_oracle.then(custom_oracle => custom_oracle.engineVersion),
 *     identifier: "ee-instance-demo",
 *     instanceClass: custom_oracle.then(custom_oracle => custom_oracle.instanceClass).apply((x) => aws.rds.InstanceType[x]),
 *     kmsKeyId: byId.then(byId => byId.arn),
 *     licenseModel: custom_oracle.then(custom_oracle => custom_oracle.licenseModel),
 *     multiAz: false,
 *     password: "avoid-plaintext-passwords",
 *     username: "test",
 *     storageEncrypted: true,
 * });
 * const test_replica = new aws.rds.Instance("test-replica", {
 *     replicateSourceDb: _default.identifier,
 *     replicaMode: "mounted",
 *     autoMinorVersionUpgrade: false,
 *     customIamInstanceProfile: "AWSRDSCustomInstanceProfile",
 *     backupRetentionPeriod: 7,
 *     identifier: "ee-instance-replica",
 *     instanceClass: custom_oracle.then(custom_oracle => custom_oracle.instanceClass).apply((x) => aws.rds.InstanceType[x]),
 *     kmsKeyId: byId.then(byId => byId.arn),
 *     multiAz: false,
 *     skipFinalSnapshot: true,
 *     storageEncrypted: true,
 * });
 * ```
 *
 * ### RDS Custom for SQL Server
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // Lookup the available instance classes for the custom engine for the region being operated in
 * const custom_sqlserver = aws.rds.getOrderableDbInstance({
 *     engine: "custom-sqlserver-se",
 *     engineVersion: "15.00.4249.2.v1",
 *     storageType: "gp3",
 *     preferredInstanceClasses: [
 *         "db.r5.xlarge",
 *         "db.r5.2xlarge",
 *         "db.r5.4xlarge",
 *     ],
 * });
 * // The RDS instance resource requires an ARN. Look up the ARN of the KMS key.
 * const byId = aws.kms.getKey({
 *     keyId: "example-ef278353ceba4a5a97de6784565b9f78",
 * });
 * const example = new aws.rds.Instance("example", {
 *     allocatedStorage: 500,
 *     autoMinorVersionUpgrade: false,
 *     customIamInstanceProfile: "AWSRDSCustomSQLServerInstanceProfile",
 *     backupRetentionPeriod: 7,
 *     dbSubnetGroupName: dbSubnetGroupName,
 *     engine: custom_sqlserver.then(custom_sqlserver => custom_sqlserver.engine),
 *     engineVersion: custom_sqlserver.then(custom_sqlserver => custom_sqlserver.engineVersion),
 *     identifier: "sql-instance-demo",
 *     instanceClass: custom_sqlserver.then(custom_sqlserver => custom_sqlserver.instanceClass).apply((x) => aws.rds.InstanceType[x]),
 *     kmsKeyId: byId.then(byId => byId.arn),
 *     multiAz: false,
 *     password: "avoid-plaintext-passwords",
 *     storageEncrypted: true,
 *     username: "test",
 * });
 * ```
 *
 * ### RDS Db2 Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // Lookup the default version for the engine. Db2 Standard Edition is `db2-se`, Db2 Advanced Edition is `db2-ae`.
 * const _default = aws.rds.getEngineVersion({
 *     engine: "db2-se",
 * });
 * // Lookup the available instance classes for the engine in the region being operated in
 * const example = Promise.all([_default, _default]).then(([_default, _default1]) => aws.rds.getOrderableDbInstance({
 *     engine: _default.engine,
 *     engineVersion: _default1.version,
 *     licenseModel: "bring-your-own-license",
 *     storageType: "gp3",
 *     preferredInstanceClasses: [
 *         "db.t3.small",
 *         "db.r6i.large",
 *         "db.m6i.large",
 *     ],
 * }));
 * // The RDS Db2 instance resource requires licensing information. Create a new parameter group using the default paramater group as a source, and set license information.
 * const exampleParameterGroup = new aws.rds.ParameterGroup("example", {
 *     name: "db-db2-params",
 *     family: _default.then(_default => _default.parameterGroupFamily),
 *     parameters: [
 *         {
 *             applyMethod: "immediate",
 *             name: "rds.ibm_customer_id",
 *             value: "0",
 *         },
 *         {
 *             applyMethod: "immediate",
 *             name: "rds.ibm_site_id",
 *             value: "0",
 *         },
 *     ],
 * });
 * // Create the RDS Db2 instance, use the data sources defined to set attributes
 * const exampleInstance = new aws.rds.Instance("example", {
 *     allocatedStorage: 100,
 *     backupRetentionPeriod: 7,
 *     dbName: "test",
 *     engine: example.then(example => example.engine),
 *     engineVersion: example.then(example => example.engineVersion),
 *     identifier: "db2-instance-demo",
 *     instanceClass: example.then(example => example.instanceClass).apply((x) => aws.rds.InstanceType[x]),
 *     parameterGroupName: exampleParameterGroup.name,
 *     password: "avoid-plaintext-passwords",
 *     username: "test",
 * });
 * ```
 *
 * ### Storage Autoscaling
 *
 * To enable Storage Autoscaling with instances that support the feature, define the `maxAllocatedStorage` argument higher than the `allocatedStorage` argument. This provider will automatically hide differences with the `allocatedStorage` argument value if autoscaling occurs.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.rds.Instance("example", {
 *     allocatedStorage: 50,
 *     maxAllocatedStorage: 100,
 * });
 * ```
 *
 * ### Managed Master Passwords via Secrets Manager, default KMS Key
 *
 * > More information about RDS/Aurora Aurora integrates with Secrets Manager to manage master user passwords for your DB clusters can be found in the [RDS User Guide](https://aws.amazon.com/about-aws/whats-new/2022/12/amazon-rds-integration-aws-secrets-manager/) and [Aurora User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html).
 *
 * You can specify the `manageMasterUserPassword` attribute to enable managing the master password with Secrets Manager. You can also update an existing cluster to use Secrets Manager by specify the `manageMasterUserPassword` attribute and removing the `password` attribute (removal is required).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const _default = new aws.rds.Instance("default", {
 *     allocatedStorage: 10,
 *     dbName: "mydb",
 *     engine: "mysql",
 *     engineVersion: "8.0",
 *     instanceClass: aws.rds.InstanceType.T3_Micro,
 *     manageMasterUserPassword: true,
 *     username: "foo",
 *     parameterGroupName: "default.mysql8.0",
 * });
 * ```
 *
 * ### Managed Master Passwords via Secrets Manager, specific KMS Key
 *
 * > More information about RDS/Aurora Aurora integrates with Secrets Manager to manage master user passwords for your DB clusters can be found in the [RDS User Guide](https://aws.amazon.com/about-aws/whats-new/2022/12/amazon-rds-integration-aws-secrets-manager/) and [Aurora User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html).
 *
 * You can specify the `masterUserSecretKmsKeyId` attribute to specify a specific KMS Key.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.kms.Key("example", {description: "Example KMS Key"});
 * const _default = new aws.rds.Instance("default", {
 *     allocatedStorage: 10,
 *     dbName: "mydb",
 *     engine: "mysql",
 *     engineVersion: "8.0",
 *     instanceClass: aws.rds.InstanceType.T3_Micro,
 *     manageMasterUserPassword: true,
 *     masterUserSecretKmsKeyId: example.keyId,
 *     username: "foo",
 *     parameterGroupName: "default.mysql8.0",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import DB Instances using the `identifier`. For example:
 *
 * ```sh
 * $ pulumi import aws:rds/instance:Instance default mydb-rds-instance
 * ```
 */
class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Instance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["allocatedStorage"] = state ? state.allocatedStorage : undefined;
            resourceInputs["allowMajorVersionUpgrade"] = state ? state.allowMajorVersionUpgrade : undefined;
            resourceInputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = state ? state.autoMinorVersionUpgrade : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["backupRetentionPeriod"] = state ? state.backupRetentionPeriod : undefined;
            resourceInputs["backupTarget"] = state ? state.backupTarget : undefined;
            resourceInputs["backupWindow"] = state ? state.backupWindow : undefined;
            resourceInputs["blueGreenUpdate"] = state ? state.blueGreenUpdate : undefined;
            resourceInputs["caCertIdentifier"] = state ? state.caCertIdentifier : undefined;
            resourceInputs["characterSetName"] = state ? state.characterSetName : undefined;
            resourceInputs["copyTagsToSnapshot"] = state ? state.copyTagsToSnapshot : undefined;
            resourceInputs["customIamInstanceProfile"] = state ? state.customIamInstanceProfile : undefined;
            resourceInputs["customerOwnedIpEnabled"] = state ? state.customerOwnedIpEnabled : undefined;
            resourceInputs["dbName"] = state ? state.dbName : undefined;
            resourceInputs["dbSubnetGroupName"] = state ? state.dbSubnetGroupName : undefined;
            resourceInputs["dedicatedLogVolume"] = state ? state.dedicatedLogVolume : undefined;
            resourceInputs["deleteAutomatedBackups"] = state ? state.deleteAutomatedBackups : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["domainAuthSecretArn"] = state ? state.domainAuthSecretArn : undefined;
            resourceInputs["domainDnsIps"] = state ? state.domainDnsIps : undefined;
            resourceInputs["domainFqdn"] = state ? state.domainFqdn : undefined;
            resourceInputs["domainIamRoleName"] = state ? state.domainIamRoleName : undefined;
            resourceInputs["domainOu"] = state ? state.domainOu : undefined;
            resourceInputs["enabledCloudwatchLogsExports"] = state ? state.enabledCloudwatchLogsExports : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineLifecycleSupport"] = state ? state.engineLifecycleSupport : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["engineVersionActual"] = state ? state.engineVersionActual : undefined;
            resourceInputs["finalSnapshotIdentifier"] = state ? state.finalSnapshotIdentifier : undefined;
            resourceInputs["hostedZoneId"] = state ? state.hostedZoneId : undefined;
            resourceInputs["iamDatabaseAuthenticationEnabled"] = state ? state.iamDatabaseAuthenticationEnabled : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["identifierPrefix"] = state ? state.identifierPrefix : undefined;
            resourceInputs["instanceClass"] = state ? state.instanceClass : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["latestRestorableTime"] = state ? state.latestRestorableTime : undefined;
            resourceInputs["licenseModel"] = state ? state.licenseModel : undefined;
            resourceInputs["listenerEndpoints"] = state ? state.listenerEndpoints : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["manageMasterUserPassword"] = state ? state.manageMasterUserPassword : undefined;
            resourceInputs["masterUserSecretKmsKeyId"] = state ? state.masterUserSecretKmsKeyId : undefined;
            resourceInputs["masterUserSecrets"] = state ? state.masterUserSecrets : undefined;
            resourceInputs["maxAllocatedStorage"] = state ? state.maxAllocatedStorage : undefined;
            resourceInputs["monitoringInterval"] = state ? state.monitoringInterval : undefined;
            resourceInputs["monitoringRoleArn"] = state ? state.monitoringRoleArn : undefined;
            resourceInputs["multiAz"] = state ? state.multiAz : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ncharCharacterSetName"] = state ? state.ncharCharacterSetName : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["optionGroupName"] = state ? state.optionGroupName : undefined;
            resourceInputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["performanceInsightsEnabled"] = state ? state.performanceInsightsEnabled : undefined;
            resourceInputs["performanceInsightsKmsKeyId"] = state ? state.performanceInsightsKmsKeyId : undefined;
            resourceInputs["performanceInsightsRetentionPeriod"] = state ? state.performanceInsightsRetentionPeriod : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["publiclyAccessible"] = state ? state.publiclyAccessible : undefined;
            resourceInputs["replicaMode"] = state ? state.replicaMode : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["replicateSourceDb"] = state ? state.replicateSourceDb : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["restoreToPointInTime"] = state ? state.restoreToPointInTime : undefined;
            resourceInputs["s3Import"] = state ? state.s3Import : undefined;
            resourceInputs["skipFinalSnapshot"] = state ? state.skipFinalSnapshot : undefined;
            resourceInputs["snapshotIdentifier"] = state ? state.snapshotIdentifier : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageEncrypted"] = state ? state.storageEncrypted : undefined;
            resourceInputs["storageThroughput"] = state ? state.storageThroughput : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["upgradeStorageConfig"] = state ? state.upgradeStorageConfig : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.instanceClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceClass'");
            }
            resourceInputs["allocatedStorage"] = args ? args.allocatedStorage : undefined;
            resourceInputs["allowMajorVersionUpgrade"] = args ? args.allowMajorVersionUpgrade : undefined;
            resourceInputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = args ? args.autoMinorVersionUpgrade : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["backupRetentionPeriod"] = args ? args.backupRetentionPeriod : undefined;
            resourceInputs["backupTarget"] = args ? args.backupTarget : undefined;
            resourceInputs["backupWindow"] = args ? args.backupWindow : undefined;
            resourceInputs["blueGreenUpdate"] = args ? args.blueGreenUpdate : undefined;
            resourceInputs["caCertIdentifier"] = args ? args.caCertIdentifier : undefined;
            resourceInputs["characterSetName"] = args ? args.characterSetName : undefined;
            resourceInputs["copyTagsToSnapshot"] = args ? args.copyTagsToSnapshot : undefined;
            resourceInputs["customIamInstanceProfile"] = args ? args.customIamInstanceProfile : undefined;
            resourceInputs["customerOwnedIpEnabled"] = args ? args.customerOwnedIpEnabled : undefined;
            resourceInputs["dbName"] = args ? args.dbName : undefined;
            resourceInputs["dbSubnetGroupName"] = args ? args.dbSubnetGroupName : undefined;
            resourceInputs["dedicatedLogVolume"] = args ? args.dedicatedLogVolume : undefined;
            resourceInputs["deleteAutomatedBackups"] = args ? args.deleteAutomatedBackups : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["domainAuthSecretArn"] = args ? args.domainAuthSecretArn : undefined;
            resourceInputs["domainDnsIps"] = args ? args.domainDnsIps : undefined;
            resourceInputs["domainFqdn"] = args ? args.domainFqdn : undefined;
            resourceInputs["domainIamRoleName"] = args ? args.domainIamRoleName : undefined;
            resourceInputs["domainOu"] = args ? args.domainOu : undefined;
            resourceInputs["enabledCloudwatchLogsExports"] = args ? args.enabledCloudwatchLogsExports : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["engineLifecycleSupport"] = args ? args.engineLifecycleSupport : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["finalSnapshotIdentifier"] = args ? args.finalSnapshotIdentifier : undefined;
            resourceInputs["iamDatabaseAuthenticationEnabled"] = args ? args.iamDatabaseAuthenticationEnabled : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["identifierPrefix"] = args ? args.identifierPrefix : undefined;
            resourceInputs["instanceClass"] = args ? args.instanceClass : undefined;
            resourceInputs["iops"] = args ? args.iops : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["licenseModel"] = args ? args.licenseModel : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["manageMasterUserPassword"] = args ? args.manageMasterUserPassword : undefined;
            resourceInputs["masterUserSecretKmsKeyId"] = args ? args.masterUserSecretKmsKeyId : undefined;
            resourceInputs["maxAllocatedStorage"] = args ? args.maxAllocatedStorage : undefined;
            resourceInputs["monitoringInterval"] = args ? args.monitoringInterval : undefined;
            resourceInputs["monitoringRoleArn"] = args ? args.monitoringRoleArn : undefined;
            resourceInputs["multiAz"] = args ? args.multiAz : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ncharCharacterSetName"] = args ? args.ncharCharacterSetName : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["optionGroupName"] = args ? args.optionGroupName : undefined;
            resourceInputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            resourceInputs["password"] = (args === null || args === void 0 ? void 0 : args.password) ? pulumi.secret(args.password) : undefined;
            resourceInputs["performanceInsightsEnabled"] = args ? args.performanceInsightsEnabled : undefined;
            resourceInputs["performanceInsightsKmsKeyId"] = args ? args.performanceInsightsKmsKeyId : undefined;
            resourceInputs["performanceInsightsRetentionPeriod"] = args ? args.performanceInsightsRetentionPeriod : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            resourceInputs["replicaMode"] = args ? args.replicaMode : undefined;
            resourceInputs["replicateSourceDb"] = args ? args.replicateSourceDb : undefined;
            resourceInputs["restoreToPointInTime"] = args ? args.restoreToPointInTime : undefined;
            resourceInputs["s3Import"] = args ? args.s3Import : undefined;
            resourceInputs["skipFinalSnapshot"] = args ? args.skipFinalSnapshot : undefined;
            resourceInputs["snapshotIdentifier"] = args ? args.snapshotIdentifier : undefined;
            resourceInputs["storageEncrypted"] = args ? args.storageEncrypted : undefined;
            resourceInputs["storageThroughput"] = args ? args.storageThroughput : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["upgradeStorageConfig"] = args ? args.upgradeStorageConfig : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            resourceInputs["address"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["engineVersionActual"] = undefined /*out*/;
            resourceInputs["hostedZoneId"] = undefined /*out*/;
            resourceInputs["latestRestorableTime"] = undefined /*out*/;
            resourceInputs["listenerEndpoints"] = undefined /*out*/;
            resourceInputs["masterUserSecrets"] = undefined /*out*/;
            resourceInputs["replicas"] = undefined /*out*/;
            resourceInputs["resourceId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Instance = Instance;
/** @internal */
Instance.__pulumiType = 'aws:rds/instance:Instance';
//# sourceMappingURL=instance.js.map