import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Resource for managing an Amazon Aurora Limitless Database DB shard group
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.rds.Cluster("example", {
 *     clusterIdentifier: "example-limitless-cluster",
 *     engine: aws.rds.EngineType.AuroraPostgresql,
 *     engineVersion: "16.6-limitless",
 *     engineMode: "",
 *     storageType: "aurora-iopt1",
 *     clusterScalabilityType: "limitless",
 *     masterUsername: "foo",
 *     masterPassword: "must_be_eight_characters",
 *     performanceInsightsEnabled: true,
 *     performanceInsightsRetentionPeriod: 31,
 *     enabledCloudwatchLogsExports: ["postgresql"],
 *     monitoringInterval: 5,
 *     monitoringRoleArn: exampleAwsIamRole.arn,
 * });
 * const exampleShardGroup = new aws.rds.ShardGroup("example", {
 *     dbShardGroupIdentifier: "example-shard-group",
 *     dbClusterIdentifier: example.id,
 *     maxAcu: 1200,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import shard group using the `db_shard_group_identifier`. For example:
 *
 * ```sh
 * $ pulumi import aws:rds/shardGroup:ShardGroup example example-shard-group
 * ```
 */
export declare class ShardGroup extends pulumi.CustomResource {
    /**
     * Get an existing ShardGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ShardGroupState, opts?: pulumi.CustomResourceOptions): ShardGroup;
    /**
     * Returns true if the given object is an instance of ShardGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ShardGroup;
    /**
     * ARN of the shard group.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
     */
    readonly computeRedundancy: pulumi.Output<number>;
    /**
     * The name of the primary DB cluster for the DB shard group.
     */
    readonly dbClusterIdentifier: pulumi.Output<string>;
    /**
     * The name of the DB shard group.
     */
    readonly dbShardGroupIdentifier: pulumi.Output<string>;
    /**
     * The AWS Region-unique, immutable identifier for the DB shard group.
     */
    readonly dbShardGroupResourceId: pulumi.Output<string>;
    /**
     * The connection endpoint for the DB shard group.
     */
    readonly endpoint: pulumi.Output<string>;
    /**
     * The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
     */
    readonly maxAcu: pulumi.Output<number>;
    /**
     * The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
     */
    readonly minAcu: pulumi.Output<number>;
    /**
     * Indicates whether the DB shard group is publicly accessible.
     */
    readonly publiclyAccessible: pulumi.Output<boolean>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    readonly timeouts: pulumi.Output<outputs.rds.ShardGroupTimeouts | undefined>;
    /**
     * Create a ShardGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ShardGroupArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ShardGroup resources.
 */
export interface ShardGroupState {
    /**
     * ARN of the shard group.
     */
    arn?: pulumi.Input<string>;
    /**
     * Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
     */
    computeRedundancy?: pulumi.Input<number>;
    /**
     * The name of the primary DB cluster for the DB shard group.
     */
    dbClusterIdentifier?: pulumi.Input<string>;
    /**
     * The name of the DB shard group.
     */
    dbShardGroupIdentifier?: pulumi.Input<string>;
    /**
     * The AWS Region-unique, immutable identifier for the DB shard group.
     */
    dbShardGroupResourceId?: pulumi.Input<string>;
    /**
     * The connection endpoint for the DB shard group.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
     */
    maxAcu?: pulumi.Input<number>;
    /**
     * The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
     */
    minAcu?: pulumi.Input<number>;
    /**
     * Indicates whether the DB shard group is publicly accessible.
     */
    publiclyAccessible?: pulumi.Input<boolean>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    timeouts?: pulumi.Input<inputs.rds.ShardGroupTimeouts>;
}
/**
 * The set of arguments for constructing a ShardGroup resource.
 */
export interface ShardGroupArgs {
    /**
     * Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
     */
    computeRedundancy?: pulumi.Input<number>;
    /**
     * The name of the primary DB cluster for the DB shard group.
     */
    dbClusterIdentifier: pulumi.Input<string>;
    /**
     * The name of the DB shard group.
     */
    dbShardGroupIdentifier: pulumi.Input<string>;
    /**
     * The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
     */
    maxAcu: pulumi.Input<number>;
    /**
     * The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
     */
    minAcu?: pulumi.Input<number>;
    /**
     * Indicates whether the DB shard group is publicly accessible.
     */
    publiclyAccessible?: pulumi.Input<boolean>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    timeouts?: pulumi.Input<inputs.rds.ShardGroupTimeouts>;
}
