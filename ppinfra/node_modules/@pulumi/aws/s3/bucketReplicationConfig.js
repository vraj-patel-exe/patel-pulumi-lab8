"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketReplicationConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an independent configuration resource for S3 bucket [replication configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html).
 *
 * > **NOTE:** S3 Buckets only support a single replication configuration. Declaring multiple `aws.s3.BucketReplicationConfig` resources to the same S3 Bucket will cause a perpetual difference in configuration.
 *
 * > This resource cannot be used with S3 directory buckets.
 *
 * ## Example Usage
 *
 * ### Using replication configuration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const assumeRole = aws.iam.getPolicyDocument({
 *     statements: [{
 *         effect: "Allow",
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["s3.amazonaws.com"],
 *         }],
 *         actions: ["sts:AssumeRole"],
 *     }],
 * });
 * const replicationRole = new aws.iam.Role("replication", {
 *     name: "tf-iam-role-replication-12345",
 *     assumeRolePolicy: assumeRole.then(assumeRole => assumeRole.json),
 * });
 * const destination = new aws.s3.BucketV2("destination", {bucket: "tf-test-bucket-destination-12345"});
 * const source = new aws.s3.BucketV2("source", {bucket: "tf-test-bucket-source-12345"});
 * const replication = aws.iam.getPolicyDocumentOutput({
 *     statements: [
 *         {
 *             effect: "Allow",
 *             actions: [
 *                 "s3:GetReplicationConfiguration",
 *                 "s3:ListBucket",
 *             ],
 *             resources: [source.arn],
 *         },
 *         {
 *             effect: "Allow",
 *             actions: [
 *                 "s3:GetObjectVersionForReplication",
 *                 "s3:GetObjectVersionAcl",
 *                 "s3:GetObjectVersionTagging",
 *             ],
 *             resources: [pulumi.interpolate`${source.arn}/*`],
 *         },
 *         {
 *             effect: "Allow",
 *             actions: [
 *                 "s3:ReplicateObject",
 *                 "s3:ReplicateDelete",
 *                 "s3:ReplicateTags",
 *             ],
 *             resources: [pulumi.interpolate`${destination.arn}/*`],
 *         },
 *     ],
 * });
 * const replicationPolicy = new aws.iam.Policy("replication", {
 *     name: "tf-iam-role-policy-replication-12345",
 *     policy: replication.apply(replication => replication.json),
 * });
 * const replicationRolePolicyAttachment = new aws.iam.RolePolicyAttachment("replication", {
 *     role: replicationRole.name,
 *     policyArn: replicationPolicy.arn,
 * });
 * const destinationBucketVersioningV2 = new aws.s3.BucketVersioningV2("destination", {
 *     bucket: destination.id,
 *     versioningConfiguration: {
 *         status: "Enabled",
 *     },
 * });
 * const sourceBucketAcl = new aws.s3.BucketAclV2("source_bucket_acl", {
 *     bucket: source.id,
 *     acl: "private",
 * });
 * const sourceBucketVersioningV2 = new aws.s3.BucketVersioningV2("source", {
 *     bucket: source.id,
 *     versioningConfiguration: {
 *         status: "Enabled",
 *     },
 * });
 * const replicationBucketReplicationConfig = new aws.s3.BucketReplicationConfig("replication", {
 *     role: replicationRole.arn,
 *     bucket: source.id,
 *     rules: [{
 *         id: "foobar",
 *         filter: {
 *             prefix: "foo",
 *         },
 *         status: "Enabled",
 *         destination: {
 *             bucket: destination.arn,
 *             storageClass: "STANDARD",
 *         },
 *     }],
 * }, {
 *     dependsOn: [sourceBucketVersioningV2],
 * });
 * ```
 *
 * ### Bi-Directional Replication
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // ... other configuration ...
 * const east = new aws.s3.BucketV2("east", {bucket: "tf-test-bucket-east-12345"});
 * const eastBucketVersioningV2 = new aws.s3.BucketVersioningV2("east", {
 *     bucket: east.id,
 *     versioningConfiguration: {
 *         status: "Enabled",
 *     },
 * });
 * const west = new aws.s3.BucketV2("west", {bucket: "tf-test-bucket-west-12345"});
 * const westBucketVersioningV2 = new aws.s3.BucketVersioningV2("west", {
 *     bucket: west.id,
 *     versioningConfiguration: {
 *         status: "Enabled",
 *     },
 * });
 * const eastToWest = new aws.s3.BucketReplicationConfig("east_to_west", {
 *     role: eastReplication.arn,
 *     bucket: east.id,
 *     rules: [{
 *         id: "foobar",
 *         filter: {
 *             prefix: "foo",
 *         },
 *         status: "Enabled",
 *         destination: {
 *             bucket: west.arn,
 *             storageClass: "STANDARD",
 *         },
 *     }],
 * }, {
 *     dependsOn: [eastBucketVersioningV2],
 * });
 * const westToEast = new aws.s3.BucketReplicationConfig("west_to_east", {
 *     role: westReplication.arn,
 *     bucket: west.id,
 *     rules: [{
 *         id: "foobar",
 *         filter: {
 *             prefix: "foo",
 *         },
 *         status: "Enabled",
 *         destination: {
 *             bucket: east.arn,
 *             storageClass: "STANDARD",
 *         },
 *     }],
 * }, {
 *     dependsOn: [westBucketVersioningV2],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import S3 bucket replication configuration using the `bucket`. For example:
 *
 * ```sh
 * $ pulumi import aws:s3/bucketReplicationConfig:BucketReplicationConfig replication bucket-name
 * ```
 */
class BucketReplicationConfig extends pulumi.CustomResource {
    /**
     * Get an existing BucketReplicationConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BucketReplicationConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of BucketReplicationConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketReplicationConfig.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["token"] = (args === null || args === void 0 ? void 0 : args.token) ? pulumi.secret(args.token) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BucketReplicationConfig.__pulumiType, name, resourceInputs, opts);
    }
}
exports.BucketReplicationConfig = BucketReplicationConfig;
/** @internal */
BucketReplicationConfig.__pulumiType = 'aws:s3/bucketReplicationConfig:BucketReplicationConfig';
//# sourceMappingURL=bucketReplicationConfig.js.map