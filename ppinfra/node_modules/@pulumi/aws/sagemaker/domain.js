"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Domain = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a SageMaker AI Domain resource.
 *
 * ## Example Usage
 *
 * ### Basic usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["sagemaker.amazonaws.com"],
 *         }],
 *     }],
 * });
 * const exampleRole = new aws.iam.Role("example", {
 *     name: "example",
 *     path: "/",
 *     assumeRolePolicy: example.then(example => example.json),
 * });
 * const exampleDomain = new aws.sagemaker.Domain("example", {
 *     domainName: "example",
 *     authMode: "IAM",
 *     vpcId: exampleAwsVpc.id,
 *     subnetIds: [exampleAwsSubnet.id],
 *     defaultUserSettings: {
 *         executionRole: exampleRole.arn,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import SageMaker AI Domains using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:sagemaker/domain:Domain test_domain d-8jgsjtilstu8
 * ```
 */
class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Domain(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["appNetworkAccessType"] = state ? state.appNetworkAccessType : undefined;
            resourceInputs["appSecurityGroupManagement"] = state ? state.appSecurityGroupManagement : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authMode"] = state ? state.authMode : undefined;
            resourceInputs["defaultSpaceSettings"] = state ? state.defaultSpaceSettings : undefined;
            resourceInputs["defaultUserSettings"] = state ? state.defaultUserSettings : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainSettings"] = state ? state.domainSettings : undefined;
            resourceInputs["homeEfsFileSystemId"] = state ? state.homeEfsFileSystemId : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["retentionPolicy"] = state ? state.retentionPolicy : undefined;
            resourceInputs["securityGroupIdForDomainBoundary"] = state ? state.securityGroupIdForDomainBoundary : undefined;
            resourceInputs["singleSignOnApplicationArn"] = state ? state.singleSignOnApplicationArn : undefined;
            resourceInputs["singleSignOnManagedApplicationInstanceId"] = state ? state.singleSignOnManagedApplicationInstanceId : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tagPropagation"] = state ? state.tagPropagation : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.authMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authMode'");
            }
            if ((!args || args.defaultUserSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultUserSettings'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["appNetworkAccessType"] = args ? args.appNetworkAccessType : undefined;
            resourceInputs["appSecurityGroupManagement"] = args ? args.appSecurityGroupManagement : undefined;
            resourceInputs["authMode"] = args ? args.authMode : undefined;
            resourceInputs["defaultSpaceSettings"] = args ? args.defaultSpaceSettings : undefined;
            resourceInputs["defaultUserSettings"] = args ? args.defaultUserSettings : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["domainSettings"] = args ? args.domainSettings : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["retentionPolicy"] = args ? args.retentionPolicy : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tagPropagation"] = args ? args.tagPropagation : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["homeEfsFileSystemId"] = undefined /*out*/;
            resourceInputs["securityGroupIdForDomainBoundary"] = undefined /*out*/;
            resourceInputs["singleSignOnApplicationArn"] = undefined /*out*/;
            resourceInputs["singleSignOnManagedApplicationInstanceId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Domain = Domain;
/** @internal */
Domain.__pulumiType = 'aws:sagemaker/domain:Domain';
//# sourceMappingURL=domain.js.map