"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pipeline = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a SageMaker AI Pipeline resource.
 *
 * ## Example Usage
 *
 * ### Basic usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.sagemaker.Pipeline("example", {
 *     pipelineName: "example",
 *     pipelineDisplayName: "example",
 *     roleArn: exampleAwsIamRole.arn,
 *     pipelineDefinition: JSON.stringify({
 *         Version: "2020-12-01",
 *         Steps: [{
 *             Name: "Test",
 *             Type: "Fail",
 *             Arguments: {
 *                 ErrorMessage: "test",
 *             },
 *         }],
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import pipelines using the `pipeline_name`. For example:
 *
 * ```sh
 * $ pulumi import aws:sagemaker/pipeline:Pipeline test_pipeline pipeline
 * ```
 */
class Pipeline extends pulumi.CustomResource {
    /**
     * Get an existing Pipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Pipeline(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Pipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pipeline.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["parallelismConfiguration"] = state ? state.parallelismConfiguration : undefined;
            resourceInputs["pipelineDefinition"] = state ? state.pipelineDefinition : undefined;
            resourceInputs["pipelineDefinitionS3Location"] = state ? state.pipelineDefinitionS3Location : undefined;
            resourceInputs["pipelineDescription"] = state ? state.pipelineDescription : undefined;
            resourceInputs["pipelineDisplayName"] = state ? state.pipelineDisplayName : undefined;
            resourceInputs["pipelineName"] = state ? state.pipelineName : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.pipelineDisplayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipelineDisplayName'");
            }
            if ((!args || args.pipelineName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipelineName'");
            }
            resourceInputs["parallelismConfiguration"] = args ? args.parallelismConfiguration : undefined;
            resourceInputs["pipelineDefinition"] = args ? args.pipelineDefinition : undefined;
            resourceInputs["pipelineDefinitionS3Location"] = args ? args.pipelineDefinitionS3Location : undefined;
            resourceInputs["pipelineDescription"] = args ? args.pipelineDescription : undefined;
            resourceInputs["pipelineDisplayName"] = args ? args.pipelineDisplayName : undefined;
            resourceInputs["pipelineName"] = args ? args.pipelineName : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pipeline.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Pipeline = Pipeline;
/** @internal */
Pipeline.__pulumiType = 'aws:sagemaker/pipeline:Pipeline';
//# sourceMappingURL=pipeline.js.map