"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegistryPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS EventBridge Schemas Registry Policy.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.iam.getPolicyDocument({
 *     statements: [{
 *         sid: "example",
 *         effect: "Allow",
 *         principals: [{
 *             type: "AWS",
 *             identifiers: ["109876543210"],
 *         }],
 *         actions: ["schemas:*"],
 *         resources: [
 *             "arn:aws:schemas:us-east-1:123456789012:registry/example",
 *             "arn:aws:schemas:us-east-1:123456789012:schema/example*",
 *         ],
 *     }],
 * });
 * const exampleRegistryPolicy = new aws.schemas.RegistryPolicy("example", {
 *     registryName: "example",
 *     policy: example.then(example => example.json),
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import EventBridge Schema Registry Policy using the `registry_name`. For example:
 *
 * ```sh
 * $ pulumi import aws:schemas/registryPolicy:RegistryPolicy example example
 * ```
 */
class RegistryPolicy extends pulumi.CustomResource {
    /**
     * Get an existing RegistryPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RegistryPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RegistryPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryPolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["registryName"] = state ? state.registryName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if ((!args || args.registryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryName'");
            }
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["registryName"] = args ? args.registryName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistryPolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.RegistryPolicy = RegistryPolicy;
/** @internal */
RegistryPolicy.__pulumiType = 'aws:schemas/registryPolicy:RegistryPolicy';
//# sourceMappingURL=registryPolicy.js.map