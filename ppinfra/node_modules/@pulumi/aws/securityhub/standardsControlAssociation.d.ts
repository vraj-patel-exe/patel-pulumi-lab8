import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 *
 * ### Basic usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.securityhub.Account("example", {});
 * const cisAwsFoundationsBenchmark = new aws.securityhub.StandardsSubscription("cis_aws_foundations_benchmark", {standardsArn: "arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0"}, {
 *     dependsOn: [example],
 * });
 * const cisAwsFoundationsBenchmarkDisableIam1 = new aws.securityhub.StandardsControlAssociation("cis_aws_foundations_benchmark_disable_iam_1", {
 *     standardsArn: cisAwsFoundationsBenchmark.standardsArn,
 *     securityControlId: "IAM.1",
 *     associationStatus: "DISABLED",
 *     updatedReason: "Not needed",
 * });
 * ```
 */
export declare class StandardsControlAssociation extends pulumi.CustomResource {
    /**
     * Get an existing StandardsControlAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StandardsControlAssociationState, opts?: pulumi.CustomResourceOptions): StandardsControlAssociation;
    /**
     * Returns true if the given object is an instance of StandardsControlAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is StandardsControlAssociation;
    /**
     * The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
     */
    readonly associationStatus: pulumi.Output<string>;
    /**
     * The unique identifier for the security control whose enablement status you want to update.
     */
    readonly securityControlId: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the standard in which you want to update the control's enablement status.
     *
     * The following arguments are optional:
     */
    readonly standardsArn: pulumi.Output<string>;
    /**
     * The reason for updating the control's enablement status in the standard. Required when `associationStatus` is `DISABLED`.
     */
    readonly updatedReason: pulumi.Output<string | undefined>;
    /**
     * Create a StandardsControlAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StandardsControlAssociationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering StandardsControlAssociation resources.
 */
export interface StandardsControlAssociationState {
    /**
     * The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
     */
    associationStatus?: pulumi.Input<string>;
    /**
     * The unique identifier for the security control whose enablement status you want to update.
     */
    securityControlId?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the standard in which you want to update the control's enablement status.
     *
     * The following arguments are optional:
     */
    standardsArn?: pulumi.Input<string>;
    /**
     * The reason for updating the control's enablement status in the standard. Required when `associationStatus` is `DISABLED`.
     */
    updatedReason?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a StandardsControlAssociation resource.
 */
export interface StandardsControlAssociationArgs {
    /**
     * The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
     */
    associationStatus: pulumi.Input<string>;
    /**
     * The unique identifier for the security control whose enablement status you want to update.
     */
    securityControlId: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the standard in which you want to update the control's enablement status.
     *
     * The following arguments are optional:
     */
    standardsArn: pulumi.Input<string>;
    /**
     * The reason for updating the control's enablement status in the standard. Required when `associationStatus` is `DISABLED`.
     */
    updatedReason?: pulumi.Input<string>;
}
