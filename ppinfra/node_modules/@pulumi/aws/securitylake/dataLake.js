"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataLake = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS Security Lake Data Lake.
 *
 * > **NOTE:** The underlying `aws.securitylake.DataLake` must be configured before creating other Security Lake resources. Use a `dependsOn` statement.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.securitylake.DataLake("example", {
 *     metaStoreManagerRoleArn: metaStoreManager.arn,
 *     configuration: {
 *         region: "eu-west-1",
 *         encryptionConfigurations: [{
 *             kmsKeyId: "S3_MANAGED_KEY",
 *         }],
 *         lifecycleConfiguration: {
 *             transitions: [
 *                 {
 *                     days: 31,
 *                     storageClass: "STANDARD_IA",
 *                 },
 *                 {
 *                     days: 80,
 *                     storageClass: "ONEZONE_IA",
 *                 },
 *             ],
 *             expiration: {
 *                 days: 300,
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.securitylake.DataLake("example", {
 *     metaStoreManagerRoleArn: metaStoreManager.arn,
 *     configuration: {
 *         region: "eu-west-1",
 *         encryptionConfigurations: [{
 *             kmsKeyId: "S3_MANAGED_KEY",
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Security Hub standards subscriptions using the standards subscription ARN. For example:
 *
 * ```sh
 * $ pulumi import aws:securitylake/dataLake:DataLake example arn:aws:securitylake:eu-west-1:123456789012:data-lake/default
 * ```
 */
class DataLake extends pulumi.CustomResource {
    /**
     * Get an existing DataLake resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DataLake(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DataLake.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataLake.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["metaStoreManagerRoleArn"] = state ? state.metaStoreManagerRoleArn : undefined;
            resourceInputs["s3BucketArn"] = state ? state.s3BucketArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.metaStoreManagerRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metaStoreManagerRoleArn'");
            }
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["metaStoreManagerRoleArn"] = args ? args.metaStoreManagerRoleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["s3BucketArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataLake.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DataLake = DataLake;
/** @internal */
DataLake.__pulumiType = 'aws:securitylake/dataLake:DataLake';
//# sourceMappingURL=dataLake.js.map