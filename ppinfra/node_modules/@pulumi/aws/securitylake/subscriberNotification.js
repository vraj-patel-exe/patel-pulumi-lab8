"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriberNotification = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS Security Lake Subscriber Notification.
 *
 * ## Example Usage
 *
 * ### SQS Notification
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.securitylake.SubscriberNotification("example", {
 *     subscriberId: exampleAwsSecuritylakeSubscriber.id,
 *     configuration: {
 *         sqsNotificationConfiguration: {},
 *     },
 * });
 * ```
 *
 * ### HTTPS Notification
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.securitylake.SubscriberNotification("example", {
 *     subscriberId: exampleAwsSecuritylakeSubscriber.id,
 *     configuration: {
 *         httpsNotificationConfiguration: {
 *             endpoint: test.apiEndpoint,
 *             targetRoleArn: eventBridge.arn,
 *         },
 *     },
 * });
 * ```
 */
class SubscriberNotification extends pulumi.CustomResource {
    /**
     * Get an existing SubscriberNotification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SubscriberNotification(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SubscriberNotification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubscriberNotification.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["endpointId"] = state ? state.endpointId : undefined;
            resourceInputs["subscriberEndpoint"] = state ? state.subscriberEndpoint : undefined;
            resourceInputs["subscriberId"] = state ? state.subscriberId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.subscriberId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriberId'");
            }
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["subscriberId"] = args ? args.subscriberId : undefined;
            resourceInputs["endpointId"] = undefined /*out*/;
            resourceInputs["subscriberEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SubscriberNotification.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SubscriberNotification = SubscriberNotification;
/** @internal */
SubscriberNotification.__pulumiType = 'aws:securitylake/subscriberNotification:SubscriberNotification';
//# sourceMappingURL=subscriberNotification.js.map