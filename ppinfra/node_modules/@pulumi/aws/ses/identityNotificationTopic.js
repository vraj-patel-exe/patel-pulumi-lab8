"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityNotificationTopic = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing SES Identity Notification Topics
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.ses.IdentityNotificationTopic("test", {
 *     topicArn: exampleAwsSnsTopic.arn,
 *     notificationType: "Bounce",
 *     identity: example.domain,
 *     includeOriginalHeaders: true,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Identity Notification Topics using the ID of the record. The ID is made up as `IDENTITY|TYPE` where `IDENTITY` is the SES Identity and `TYPE` is the Notification Type. For example:
 *
 * ```sh
 * $ pulumi import aws:ses/identityNotificationTopic:IdentityNotificationTopic test 'example.com|Bounce'
 * ```
 */
class IdentityNotificationTopic extends pulumi.CustomResource {
    /**
     * Get an existing IdentityNotificationTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IdentityNotificationTopic(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of IdentityNotificationTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityNotificationTopic.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["includeOriginalHeaders"] = state ? state.includeOriginalHeaders : undefined;
            resourceInputs["notificationType"] = state ? state.notificationType : undefined;
            resourceInputs["topicArn"] = state ? state.topicArn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            if ((!args || args.notificationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationType'");
            }
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["includeOriginalHeaders"] = args ? args.includeOriginalHeaders : undefined;
            resourceInputs["notificationType"] = args ? args.notificationType : undefined;
            resourceInputs["topicArn"] = args ? args.topicArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityNotificationTopic.__pulumiType, name, resourceInputs, opts);
    }
}
exports.IdentityNotificationTopic = IdentityNotificationTopic;
/** @internal */
IdentityNotificationTopic.__pulumiType = 'aws:ses/identityNotificationTopic:IdentityNotificationTopic';
//# sourceMappingURL=identityNotificationTopic.js.map