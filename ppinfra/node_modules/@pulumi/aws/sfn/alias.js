"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Alias = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Step Function State Machine Alias.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const sfnAlias = new aws.sfn.Alias("sfn_alias", {
 *     name: "my_sfn_alias",
 *     routingConfigurations: [{
 *         stateMachineVersionArn: sfnTest.stateMachineVersionArn,
 *         weight: 100,
 *     }],
 * });
 * const mySfnAlias = new aws.sfn.Alias("my_sfn_alias", {
 *     name: "my_sfn_alias",
 *     routingConfigurations: [
 *         {
 *             stateMachineVersionArn: "arn:aws:states:us-east-1:12345:stateMachine:demo:3",
 *             weight: 50,
 *         },
 *         {
 *             stateMachineVersionArn: "arn:aws:states:us-east-1:12345:stateMachine:demo:2",
 *             weight: 50,
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import SFN (Step Functions) Alias using the `arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:sfn/alias:Alias foo arn:aws:states:us-east-1:123456789098:stateMachine:myStateMachine:foo
 * ```
 */
class Alias extends pulumi.CustomResource {
    /**
     * Get an existing Alias resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Alias(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Alias.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Alias.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["routingConfigurations"] = state ? state.routingConfigurations : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.routingConfigurations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routingConfigurations'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["routingConfigurations"] = args ? args.routingConfigurations : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Alias.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Alias = Alias;
/** @internal */
Alias.__pulumiType = 'aws:sfn/alias:Alias';
//# sourceMappingURL=alias.js.map