"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedrivePolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Allows you to set a redrive policy of an SQS Queue
 * while referencing ARN of the dead letter queue inside the redrive policy.
 *
 * This is useful when you want to set a dedicated
 * dead letter queue for a standard or FIFO queue, but need
 * the dead letter queue to exist before setting the redrive policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const q = new aws.sqs.Queue("q", {name: "examplequeue"});
 * const ddl = new aws.sqs.Queue("ddl", {
 *     name: "examplequeue-ddl",
 *     redriveAllowPolicy: pulumi.jsonStringify({
 *         redrivePermission: "byQueue",
 *         sourceQueueArns: [q.arn],
 *     }),
 * });
 * const qRedrivePolicy = new aws.sqs.RedrivePolicy("q", {
 *     queueUrl: q.id,
 *     redrivePolicy: pulumi.jsonStringify({
 *         deadLetterTargetArn: ddl.arn,
 *         maxReceiveCount: 4,
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import SQS Queue Redrive Policies using the queue URL. For example:
 *
 * ```sh
 * $ pulumi import aws:sqs/redrivePolicy:RedrivePolicy test https://queue.amazonaws.com/123456789012/myqueue
 * ```
 */
class RedrivePolicy extends pulumi.CustomResource {
    /**
     * Get an existing RedrivePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RedrivePolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RedrivePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedrivePolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["queueUrl"] = state ? state.queueUrl : undefined;
            resourceInputs["redrivePolicy"] = state ? state.redrivePolicy : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.queueUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queueUrl'");
            }
            if ((!args || args.redrivePolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redrivePolicy'");
            }
            resourceInputs["queueUrl"] = args ? args.queueUrl : undefined;
            resourceInputs["redrivePolicy"] = args ? args.redrivePolicy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RedrivePolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.RedrivePolicy = RedrivePolicy;
/** @internal */
RedrivePolicy.__pulumiType = 'aws:sqs/redrivePolicy:RedrivePolicy';
//# sourceMappingURL=redrivePolicy.js.map