"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSystemAssociation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Associate an Amazon FSx file system with the FSx File Gateway. After the association process is complete, the file shares on the Amazon FSx file system are available for access through the gateway. This operation only supports the FSx File Gateway type.
 *
 * [FSx File Gateway requirements](https://docs.aws.amazon.com/filegateway/latest/filefsxw/Requirements.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.storagegateway.FileSystemAssociation("example", {
 *     gatewayArn: exampleAwsStoragegatewayGateway.arn,
 *     locationArn: exampleAwsFsxWindowsFileSystem.arn,
 *     username: "Admin",
 *     password: "avoid-plaintext-passwords",
 *     auditDestinationArn: exampleAwsS3Bucket.arn,
 * });
 * ```
 *
 * ## Required Services Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const awsServiceStoragegatewayAmiFILES3Latest = aws.ssm.getParameter({
 *     name: "/aws/service/storagegateway/ami/FILE_S3/latest",
 * });
 * const test = new aws.ec2.Instance("test", {
 *     ami: awsServiceStoragegatewayAmiFILES3Latest.then(awsServiceStoragegatewayAmiFILES3Latest => awsServiceStoragegatewayAmiFILES3Latest.value),
 *     associatePublicIpAddress: true,
 *     instanceType: aws.ec2.InstanceType[available.instanceType],
 *     vpcSecurityGroupIds: [testAwsSecurityGroup.id],
 *     subnetId: testAwsSubnet[0].id,
 * }, {
 *     dependsOn: [
 *         testAwsRoute,
 *         testAwsVpcDhcpOptionsAssociation,
 *     ],
 * });
 * const testGateway = new aws.storagegateway.Gateway("test", {
 *     gatewayIpAddress: test.publicIp,
 *     gatewayName: "test-sgw",
 *     gatewayTimezone: "GMT",
 *     gatewayType: "FILE_FSX_SMB",
 *     smbActiveDirectorySettings: {
 *         domainName: testAwsDirectoryServiceDirectory.name,
 *         password: testAwsDirectoryServiceDirectory.password,
 *         username: "Admin",
 *     },
 * });
 * const testWindowsFileSystem = new aws.fsx.WindowsFileSystem("test", {
 *     activeDirectoryId: testAwsDirectoryServiceDirectory.id,
 *     securityGroupIds: [testAwsSecurityGroup.id],
 *     skipFinalBackup: true,
 *     storageCapacity: 32,
 *     subnetIds: [testAwsSubnet[0].id],
 *     throughputCapacity: 8,
 * });
 * const fsx = new aws.storagegateway.FileSystemAssociation("fsx", {
 *     gatewayArn: testGateway.arn,
 *     locationArn: testWindowsFileSystem.arn,
 *     username: "Admin",
 *     password: testAwsDirectoryServiceDirectory.password,
 *     cacheAttributes: {
 *         cacheStaleTimeoutInSeconds: 400,
 *     },
 *     auditDestinationArn: testAwsCloudwatchLogGroup.arn,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_storagegateway_file_system_association` using the FSx file system association Amazon Resource Name (ARN). For example:
 *
 * ```sh
 * $ pulumi import aws:storagegateway/fileSystemAssociation:FileSystemAssociation example arn:aws:storagegateway:us-east-1:123456789012:fs-association/fsa-0DA347732FDB40125
 * ```
 */
class FileSystemAssociation extends pulumi.CustomResource {
    /**
     * Get an existing FileSystemAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FileSystemAssociation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FileSystemAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileSystemAssociation.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["auditDestinationArn"] = state ? state.auditDestinationArn : undefined;
            resourceInputs["cacheAttributes"] = state ? state.cacheAttributes : undefined;
            resourceInputs["gatewayArn"] = state ? state.gatewayArn : undefined;
            resourceInputs["locationArn"] = state ? state.locationArn : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.gatewayArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayArn'");
            }
            if ((!args || args.locationArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationArn'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["auditDestinationArn"] = args ? args.auditDestinationArn : undefined;
            resourceInputs["cacheAttributes"] = args ? args.cacheAttributes : undefined;
            resourceInputs["gatewayArn"] = args ? args.gatewayArn : undefined;
            resourceInputs["locationArn"] = args ? args.locationArn : undefined;
            resourceInputs["password"] = (args === null || args === void 0 ? void 0 : args.password) ? pulumi.secret(args.password) : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FileSystemAssociation.__pulumiType, name, resourceInputs, opts);
    }
}
exports.FileSystemAssociation = FileSystemAssociation;
/** @internal */
FileSystemAssociation.__pulumiType = 'aws:storagegateway/fileSystemAssociation:FileSystemAssociation';
//# sourceMappingURL=fileSystemAssociation.js.map