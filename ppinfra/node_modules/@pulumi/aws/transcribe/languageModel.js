"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageModel = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS Transcribe LanguageModel.
 *
 * > This resource can take a significant amount of time to provision. See Language Model [FAQ](https://aws.amazon.com/transcribe/faqs/) for more details.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["transcribe.amazonaws.com"],
 *         }],
 *     }],
 * });
 * const exampleRole = new aws.iam.Role("example", {
 *     name: "example",
 *     assumeRolePolicy: example.then(example => example.json),
 * });
 * const testPolicy = new aws.iam.RolePolicy("test_policy", {
 *     name: "example",
 *     role: exampleRole.id,
 *     policy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Action: [
 *                 "s3:GetObject",
 *                 "s3:ListBucket",
 *             ],
 *             Effect: "Allow",
 *             Resource: ["*"],
 *         }],
 *     }),
 * });
 * const exampleBucketV2 = new aws.s3.BucketV2("example", {
 *     bucket: "example-transcribe",
 *     forceDestroy: true,
 * });
 * const object = new aws.s3.BucketObjectv2("object", {
 *     bucket: exampleBucketV2.id,
 *     key: "transcribe/test1.txt",
 *     source: new pulumi.asset.FileAsset("test1.txt"),
 * });
 * const exampleLanguageModel = new aws.transcribe.LanguageModel("example", {
 *     modelName: "example",
 *     baseModelName: "NarrowBand",
 *     inputDataConfig: {
 *         dataAccessRoleArn: exampleRole.arn,
 *         s3Uri: pulumi.interpolate`s3://${exampleBucketV2.id}/transcribe/`,
 *     },
 *     languageCode: "en-US",
 *     tags: {
 *         ENVIRONMENT: "development",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Transcribe LanguageModel using the `model_name`. For example:
 *
 * ```sh
 * $ pulumi import aws:transcribe/languageModel:LanguageModel example example-name
 * ```
 */
class LanguageModel extends pulumi.CustomResource {
    /**
     * Get an existing LanguageModel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LanguageModel(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LanguageModel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LanguageModel.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["baseModelName"] = state ? state.baseModelName : undefined;
            resourceInputs["inputDataConfig"] = state ? state.inputDataConfig : undefined;
            resourceInputs["languageCode"] = state ? state.languageCode : undefined;
            resourceInputs["modelName"] = state ? state.modelName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.baseModelName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'baseModelName'");
            }
            if ((!args || args.inputDataConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputDataConfig'");
            }
            if ((!args || args.languageCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'languageCode'");
            }
            if ((!args || args.modelName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'modelName'");
            }
            resourceInputs["baseModelName"] = args ? args.baseModelName : undefined;
            resourceInputs["inputDataConfig"] = args ? args.inputDataConfig : undefined;
            resourceInputs["languageCode"] = args ? args.languageCode : undefined;
            resourceInputs["modelName"] = args ? args.modelName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LanguageModel.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LanguageModel = LanguageModel;
/** @internal */
LanguageModel.__pulumiType = 'aws:transcribe/languageModel:LanguageModel';
//# sourceMappingURL=languageModel.js.map