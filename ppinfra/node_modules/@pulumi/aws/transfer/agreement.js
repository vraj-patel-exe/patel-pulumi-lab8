"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Agreement = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a AWS Transfer AS2 Agreement resource.
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.transfer.Agreement("example", {
 *     accessRole: test.arn,
 *     baseDirectory: "/DOC-EXAMPLE-BUCKET/home/mydirectory",
 *     description: "example",
 *     localProfileId: local.profileId,
 *     partnerProfileId: partner.profileId,
 *     serverId: testAwsTransferServer.id,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Transfer AS2 Agreement using the `server_id/agreement_id`. For example:
 *
 * ```sh
 * $ pulumi import aws:transfer/agreement:Agreement example s-4221a88afd5f4362a/a-4221a88afd5f4362a
 * ```
 */
class Agreement extends pulumi.CustomResource {
    /**
     * Get an existing Agreement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Agreement(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Agreement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Agreement.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessRole"] = state ? state.accessRole : undefined;
            resourceInputs["agreementId"] = state ? state.agreementId : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["baseDirectory"] = state ? state.baseDirectory : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["localProfileId"] = state ? state.localProfileId : undefined;
            resourceInputs["partnerProfileId"] = state ? state.partnerProfileId : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accessRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessRole'");
            }
            if ((!args || args.baseDirectory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'baseDirectory'");
            }
            if ((!args || args.localProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localProfileId'");
            }
            if ((!args || args.partnerProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partnerProfileId'");
            }
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            resourceInputs["accessRole"] = args ? args.accessRole : undefined;
            resourceInputs["baseDirectory"] = args ? args.baseDirectory : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["localProfileId"] = args ? args.localProfileId : undefined;
            resourceInputs["partnerProfileId"] = args ? args.partnerProfileId : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["agreementId"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Agreement.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Agreement = Agreement;
/** @internal */
Agreement.__pulumiType = 'aws:transfer/agreement:Agreement';
//# sourceMappingURL=agreement.js.map