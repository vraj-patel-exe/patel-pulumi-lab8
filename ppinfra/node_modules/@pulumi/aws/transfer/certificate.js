"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Certificate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a AWS Transfer AS2 Certificate resource.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Using `pulumi import`, import Transfer AS2 Certificate using the `certificate_id`. For example:
 *
 * ```sh
 * $ pulumi import aws:transfer/certificate:Certificate example c-4221a88afd5f4362a
 * ```
 */
class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Certificate(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["activeDate"] = state ? state.activeDate : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["inactiveDate"] = state ? state.inactiveDate : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["usage"] = state ? state.usage : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.certificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificate'");
            }
            if ((!args || args.usage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'usage'");
            }
            resourceInputs["certificate"] = (args === null || args === void 0 ? void 0 : args.certificate) ? pulumi.secret(args.certificate) : undefined;
            resourceInputs["certificateChain"] = (args === null || args === void 0 ? void 0 : args.certificateChain) ? pulumi.secret(args.certificateChain) : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["privateKey"] = (args === null || args === void 0 ? void 0 : args.privateKey) ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["usage"] = args ? args.usage : undefined;
            resourceInputs["activeDate"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["certificateId"] = undefined /*out*/;
            resourceInputs["inactiveDate"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["certificate", "certificateChain", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Certificate = Certificate;
/** @internal */
Certificate.__pulumiType = 'aws:transfer/certificate:Certificate';
//# sourceMappingURL=certificate.js.map