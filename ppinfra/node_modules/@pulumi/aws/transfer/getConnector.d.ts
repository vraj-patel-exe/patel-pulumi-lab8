import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Data source for managing an AWS Transfer Family Connector.
 */
export declare function getConnector(args: GetConnectorArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectorResult>;
/**
 * A collection of arguments for invoking getConnector.
 */
export interface GetConnectorArgs {
    /**
     * Unique identifier for connector
     */
    id: string;
}
/**
 * A collection of values returned by getConnector.
 */
export interface GetConnectorResult {
    /**
     * ARN of the AWS Identity and Access Management role.
     */
    readonly accessRole: string;
    /**
     * ARN of the Connector.
     */
    readonly arn: string;
    /**
     * Structure containing the parameters for an AS2 connector object. Contains the following attributes:
     */
    readonly as2Configs: outputs.transfer.GetConnectorAs2Config[];
    readonly id: string;
    /**
     * ARN of the IAM role that allows a connector to turn on CLoudwatch logging for Amazon S3 events.
     */
    readonly loggingRole: string;
    /**
     * Name of security policy.
     */
    readonly securityPolicyName: string;
    /**
     * List of egress Ip addresses.
     */
    readonly serviceManagedEgressIpAddresses: string[];
    /**
     * Object containing the following attributes:
     */
    readonly sftpConfigs: outputs.transfer.GetConnectorSftpConfig[];
    /**
     * Object containing the following attributes:
     */
    readonly tags: {
        [key: string]: string;
    };
    /**
     * URL of the partner's AS2 or SFTP endpoint.
     */
    readonly url: string;
}
/**
 * Data source for managing an AWS Transfer Family Connector.
 */
export declare function getConnectorOutput(args: GetConnectorOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetConnectorResult>;
/**
 * A collection of arguments for invoking getConnector.
 */
export interface GetConnectorOutputArgs {
    /**
     * Unique identifier for connector
     */
    id: pulumi.Input<string>;
}
