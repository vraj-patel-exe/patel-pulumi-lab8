"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceLoggingConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing a Verified Access Logging Configuration.
 *
 * ## Example Usage
 *
 * ### With CloudWatch Logging
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.verifiedaccess.InstanceLoggingConfiguration("example", {
 *     accessLogs: {
 *         cloudwatchLogs: {
 *             enabled: true,
 *             logGroup: exampleAwsCloudwatchLogGroup.id,
 *         },
 *     },
 *     verifiedaccessInstanceId: exampleAwsVerifiedaccessInstance.id,
 * });
 * ```
 *
 * ### With Kinesis Data Firehose Logging
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.verifiedaccess.InstanceLoggingConfiguration("example", {
 *     accessLogs: {
 *         kinesisDataFirehose: {
 *             deliveryStream: exampleAwsKinesisFirehoseDeliveryStream.name,
 *             enabled: true,
 *         },
 *     },
 *     verifiedaccessInstanceId: exampleAwsVerifiedaccessInstance.id,
 * });
 * ```
 *
 * ### With S3 logging
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.verifiedaccess.InstanceLoggingConfiguration("example", {
 *     accessLogs: {
 *         s3: {
 *             bucketName: exampleAwsS3Bucket.id,
 *             enabled: true,
 *             prefix: "example",
 *         },
 *     },
 *     verifiedaccessInstanceId: exampleAwsVerifiedaccessInstance.id,
 * });
 * ```
 *
 * ### With all three logging options
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.verifiedaccess.InstanceLoggingConfiguration("example", {
 *     accessLogs: {
 *         cloudwatchLogs: {
 *             enabled: true,
 *             logGroup: exampleAwsCloudwatchLogGroup.id,
 *         },
 *         kinesisDataFirehose: {
 *             deliveryStream: exampleAwsKinesisFirehoseDeliveryStream.name,
 *             enabled: true,
 *         },
 *         s3: {
 *             bucketName: exampleAwsS3Bucket.id,
 *             enabled: true,
 *         },
 *     },
 *     verifiedaccessInstanceId: exampleAwsVerifiedaccessInstance.id,
 * });
 * ```
 *
 * ### With `includeTrustContext`
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.verifiedaccess.InstanceLoggingConfiguration("example", {
 *     accessLogs: {
 *         includeTrustContext: true,
 *     },
 *     verifiedaccessInstanceId: exampleAwsVerifiedaccessInstance.id,
 * });
 * ```
 *
 * ### With `logVersion`
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.verifiedaccess.InstanceLoggingConfiguration("example", {
 *     accessLogs: {
 *         logVersion: "ocsf-1.0.0-rc.2",
 *     },
 *     verifiedaccessInstanceId: exampleAwsVerifiedaccessInstance.id,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Verified Access Logging Configuration using the Verified Access Instance `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:verifiedaccess/instanceLoggingConfiguration:InstanceLoggingConfiguration example vai-1234567890abcdef0
 * ```
 */
class InstanceLoggingConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing InstanceLoggingConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new InstanceLoggingConfiguration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of InstanceLoggingConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceLoggingConfiguration.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessLogs"] = state ? state.accessLogs : undefined;
            resourceInputs["verifiedaccessInstanceId"] = state ? state.verifiedaccessInstanceId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accessLogs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessLogs'");
            }
            if ((!args || args.verifiedaccessInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'verifiedaccessInstanceId'");
            }
            resourceInputs["accessLogs"] = args ? args.accessLogs : undefined;
            resourceInputs["verifiedaccessInstanceId"] = args ? args.verifiedaccessInstanceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceLoggingConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}
exports.InstanceLoggingConfiguration = InstanceLoggingConfiguration;
/** @internal */
InstanceLoggingConfiguration.__pulumiType = 'aws:verifiedaccess/instanceLoggingConfiguration:InstanceLoggingConfiguration';
//# sourceMappingURL=instanceLoggingConfiguration.js.map