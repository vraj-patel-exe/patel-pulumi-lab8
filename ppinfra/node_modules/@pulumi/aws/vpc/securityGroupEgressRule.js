"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityGroupEgressRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an outbound (egress) rule for a security group.
 *
 * When specifying an outbound rule for your security group in a VPC, the configuration must include a destination for the traffic.
 *
 * > **NOTE:** Using `aws.vpc.SecurityGroupEgressRule` and `aws.vpc.SecurityGroupIngressRule` resources is the current best practice. Avoid using the `aws.ec2.SecurityGroupRule` resource and the `ingress` and `egress` arguments of the `aws.ec2.SecurityGroup` resource for configuring in-line rules, as they struggle with managing multiple CIDR blocks, and tags and descriptions due to the historical lack of unique IDs.
 *
 * !> **WARNING:** You should not use the `aws.vpc.SecurityGroupEgressRule` and `aws.vpc.SecurityGroupIngressRule` resources in conjunction with the `aws.ec2.SecurityGroup` resource with _in-line rules_ (using the `ingress` and `egress` arguments of `aws.ec2.SecurityGroup`) or the `aws.ec2.SecurityGroupRule` resource. Doing so may cause rule conflicts, perpetual differences, and result in rules being overwritten.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.vpc.SecurityGroupEgressRule("example", {
 *     securityGroupId: exampleAwsSecurityGroup.id,
 *     cidrIpv4: "10.0.0.0/8",
 *     fromPort: 80,
 *     ipProtocol: "tcp",
 *     toPort: 80,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import security group egress rules using the `security_group_rule_id`. For example:
 *
 * ```sh
 * $ pulumi import aws:vpc/securityGroupEgressRule:SecurityGroupEgressRule example sgr-02108b27edd666983
 * ```
 */
class SecurityGroupEgressRule extends pulumi.CustomResource {
    /**
     * Get an existing SecurityGroupEgressRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SecurityGroupEgressRule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SecurityGroupEgressRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityGroupEgressRule.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cidrIpv4"] = state ? state.cidrIpv4 : undefined;
            resourceInputs["cidrIpv6"] = state ? state.cidrIpv6 : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fromPort"] = state ? state.fromPort : undefined;
            resourceInputs["ipProtocol"] = state ? state.ipProtocol : undefined;
            resourceInputs["prefixListId"] = state ? state.prefixListId : undefined;
            resourceInputs["referencedSecurityGroupId"] = state ? state.referencedSecurityGroupId : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["securityGroupRuleId"] = state ? state.securityGroupRuleId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["toPort"] = state ? state.toPort : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.ipProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipProtocol'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            resourceInputs["cidrIpv4"] = args ? args.cidrIpv4 : undefined;
            resourceInputs["cidrIpv6"] = args ? args.cidrIpv6 : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fromPort"] = args ? args.fromPort : undefined;
            resourceInputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            resourceInputs["prefixListId"] = args ? args.prefixListId : undefined;
            resourceInputs["referencedSecurityGroupId"] = args ? args.referencedSecurityGroupId : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["toPort"] = args ? args.toPort : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["securityGroupRuleId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityGroupEgressRule.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SecurityGroupEgressRule = SecurityGroupEgressRule;
/** @internal */
SecurityGroupEgressRule.__pulumiType = 'aws:vpc/securityGroupEgressRule:SecurityGroupEgressRule';
//# sourceMappingURL=securityGroupEgressRule.js.map