"use strict";
// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
// Export members:
__exportStar(require("./azureBlobFolder"), exports);
__exportStar(require("./googleCloudFolder"), exports);
__exportStar(require("./provider"), exports);
__exportStar(require("./s3bucketFolder"), exports);
// Import resources to register:
const azureBlobFolder_1 = require("./azureBlobFolder");
const googleCloudFolder_1 = require("./googleCloudFolder");
const s3bucketFolder_1 = require("./s3bucketFolder");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "synced-folder:index:AzureBlobFolder":
                return new azureBlobFolder_1.AzureBlobFolder(name, undefined, { urn });
            case "synced-folder:index:GoogleCloudFolder":
                return new googleCloudFolder_1.GoogleCloudFolder(name, undefined, { urn });
            case "synced-folder:index:S3BucketFolder":
                return new s3bucketFolder_1.S3BucketFolder(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("synced-folder", "index", _module);
const provider_1 = require("./provider");
pulumi.runtime.registerResourcePackage("synced-folder", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:synced-folder") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map